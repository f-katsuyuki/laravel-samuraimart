
--------------------------------------------
●要件定義書の作成
--------------------------------------------
【機能詳細】
・ログイン
・お気に入り
・商品のソート
・カート（ショッピングカート）

＜実装する為の使用ライブラリ＞
★Laravelで使用できるライブラリ

●laravel/ui　　ログイン機能を実装する為に用いる

●overtrue/laravel-favorite：　　フォローやお気に入り等のライブラリ

●bumbummen99/LaravelShoppingcart　　ショッピングカートを実装できる

----------------------------------------------------------------
※各バージョンの確認方法
・PHP　-V
・composer　-v
----------------------------------------------------------------

-------------------------------------------------------------------------------------------
●1.プロジェクトの作成********************************************************************
-------------------------------------------------------------------------------------------
・＜samuraimartプロジェクトを作成＞
【コマンド】
composer create-project "laravel/laravel=9.*" laravel-samuraimart

※プロジェクトを作成するときはパスに注意する。
PS C:\xampp\htdocs> 
★＜●●htdocs直下で行う●●＞

※※※＜phpのverが9.代であることも注意が必要＞

-------------------------------------------------------------------------------------------
●2.タイムゾーンの設定********************************************************************
-------------------------------------------------------------------------------------------
プロジェクト
　　　L　config
　　　　L　app.php
　　　　'timezone' => 'Asia/Tokyo',//ここを変更
　　　　

-------------------------------------------------------------------------------------------
●3.データベースの作成********************************************************************
-------------------------------------------------------------------------------------------

----------------------------------------------
・3.1　データベースの作成
----------------------------------------------
◆mysqlの【admin】ボタンをクリック。
◆新規作成をクリックして、DB名を入力し作成をクリック

----------------------------------------------
・3.2　envファイルにDBを設定
----------------------------------------------
◆ DB_DATABASE=laravel_samuraimart



----------------------------------------------
・3.3　モデルとマイグレーションを行いDBと接続
----------------------------------------------
【コマンド】
php artisan make:model Category -m
---------------------------------------------------------
app
　L　Models
　　　　L　Category.php　が作成される。
---------------------------------------------------------　　　　
【-m】オプションをつけたのでmigragionフォルダに　　　　
database　　　　
　　L　migration
　　　　　　L　2023_02_20_193432_create_categories_table.phpファイルも作成されている
　　　　　　　　


----------------------------------------------
・3.4　マイグレーションファイルを編集してフィールド定義
----------------------------------------------
database　　　　
　　L　migration
　　　　　　L　2023_02_20_193432_create_categories_table.php
function　UP　
{
			$table->string('name');
            $table->text('description');
            $table->string('major_category_name');
｝　　　　
※上記３つを追加。フィールド定義

定義を反映させるには必ずmigrateを行う
【コマンド】
php artisan migrate

----------------------------------------------
・3.5　カテゴリを追加　＜★ライブラリ＞
----------------------------------------------
【コマンド実行】
php artisan tinker
※コードを気軽に試せるのがTinkerのメリット

【コマンド】
 Category::all()
 これを打ち込んでそのあとに内部の実装をここで行える。
 
  Category::all()
　
　//Categoryモデルを用いて新しい$category変数を作成
　$category = new Category()

//親カテゴリの名前と説明文を追加　　　　　　
　$category->major_category_name="Food"//----------------------------------------
　
　//カテゴリの名前を追加するコードを記述
　$category->name="meat"//-------------------------------------------------------
　
　//カテゴリの説明文を追記するコード
　$category->description = "description for meat."//-------------------------------
　　　　　
　
　$categoryに保存されているデータをデータベースに保存。
　$category->save()　　　　　

  //作成した＜モデル＞Categoryに設定した内容を確認
　　Category::all()

	//tinkerを終了する
	【コマンド】
	　exit　　　　　　＜モデル名::all()　～　　exit＞

-------------------------------------------------------------------------------------------
●4.カテゴリのシーダーを作る********************************************************************
-------------------------------------------------------------------------------------------
database
    L seeders
         L CategoriesTableSeeder.php
         
※※シーダーとはダミーのデータや必要になる基礎データなどをまとめて作成することができる仕組み
【コマンド】
php artisan make:seeder CategoriesTableSeeder

CategoriesTableSeeder.phpに下記を宣言して内容を記載していく。
★use App\Models\Category;

public function run()
{
	 	//各配列変数の大カテゴリを作成
	 	$major_category_names = [
             '本', 'コンピュータ', 'ディスプレイ'
         ];
 		
 		//小カテゴリを配列変数へ格納
         $book_categories = [
             'ビジネス', '文学・評論', '人文・思想', 'スポーツ',
             'コンピュータ・IT', '資格・検定・就職', '絵本・児童書', '写真集',
             'ゲーム攻略本', '雑誌', 'アート・デザイン', 'ノンフィクション'
         ];
 		
 		//小カテゴリを配列変数へ格納
         $computer_categories = [
             'ノートPC', 'デスクトップPC', 'タブレット' 
         ];
 		//小カテゴリを配列変数へ格納
         $display_categories = [
             '19~20インチ', 'デスクトップPC', 'タブレット' 
         ];
 		
 		//大カテゴリで回して要素名で処理分岐
         foreach ($major_category_names as $major_category_name) {
             //大カテゴリの要素'本'なら
             if ($major_category_name == '本') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($book_categories as $book_category) {
                     Category::create([
                         'name' => $book_category,
                         'description' => $book_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
 			
 			//大カテゴリの要素'コンピュータ'なら
             if ($major_category_name == 'コンピュータ') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($computer_categories as $computer_category) {
                     Category::create([
                         'name' => $computer_category,
                         'description' => $computer_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
 			
 			//大カテゴリの要素'ディスプレイ'なら
             if ($major_category_name == 'ディスプレイ') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($display_categories as $display_category) {
                     Category::create([
                         'name' => $display_category,
                         'description' => $display_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
         }
	
	
	
}


----------------------------------------------
・4.2　定義したシーダを読み込む
★【コマンド】上記で作成したシーダーを読み込ませる
composer dump-autoload
----------------------------------------------
・4.3　カテゴリデータを作成する
★【コマンド】カテゴリデータを作成する
php artisan db:seed --class=CategoriesTableSeeder


◆シーダーが作成されたかTinkerを使用して確認
【コマンド】
・　php artisan tinker

・　Category::all()

◆表示されていればtinkerを終了
【コマンド】
・exit

◆◆◆ここで一度テーブルを削除して再度まいグレーションを行う//--------------------やり直す意味は？？
【コマンド】
php artisan migrate::fresh //テーブルを削除


◆◆◆再度カテゴリデータを作成しなおす
【コマンド】
php artisan db:seed --class=CategoriesTableSeeder　　　　　//-----------------migrationをやり直すのにmigrateがない？？？
-------------------------------------------------------------------------------------------
●5商品を追加できるようにしよう
-------------------------------------------------------------------------------------------
----------------------------------------
◆5.1商品のモデルを追加
----------------------------------------
【コマンド】
php artisan make:model Product -m
----------------------------------------------------------
database
　　L　migrations
　　　　　　L　XXXX_XX_XX_XXXXXX_create_products_table.php
-----------------------------------------------------------

◆上記ファイルに定義追加
			public function up()
    		{
				$table->string('name');
            	$table->text('description');
            	$table->integer('price')->unsigned();//unsigned()を追加することで、-5000などのマイナスの値が保存できない				$table->integer('category_id')->unsigned();
			}
			

----------------------------------------
◆5.2商品のコントローラーを追加
----------------------------------------
【コマンド】
php artisan make:controller ProductController --resource --model=Product


----------------------------------------
◆5.2商品のコントローラーと紐づけを作成
----------------------------------------
app
　L　Models
　　　　L　Product.php
　　★★　　
　　public function category()
     {
         return $this->belongsTo('App\Models\Category');//モデルからCategoryを呼び出す設定をしている
     }　　
--------------------------------------------------------------------------

●category.phpも同様にリレーション設定を行う
	 public function products()
     {
         return $this->hasMany('App\Models\Product');//今回は紐づけというよりモデルからProductを呼び出せるようにしている
     }
※１つのカテゴリには複数の商品が結びつくのでhasmany

----------------------------------------
◆5.3 マイグレーションを実行
----------------------------------------
【コマンド】
php artisan migrate


----------------------------------------
◆5.4 商品のCRUDを作成
----------------------------------------
----------------------------------------
◆5.4.1商品のCRUD用のルーティング設定を行う
----------------------------------------
routes
　　L　　routes\web.php
　　
　　Route::resource('products', ProductController::class);//productsControllerを使用を定義
　　※【第一引数にベースとなるURLを文字列で渡し、第二引数で使用するコントローラを指定】
　　
　　
----------------------------------------
◆5.4.2コントローラーの設定を行う
----------------------------------------　
app
　L　Http
　　　L　Controllers
　　　　　　　　L　ProductController.php

　【◆index】
	　	public function index()
	    {
	        $products=Product::all();//productsの全てを取得
	        return view('products.index',compact('products'));//
	    }
	※'products.index'と記述すると、resources\views\productsディレクトリの中にあるindex.blade.phpが呼び出されます

------------------------------------------	
◆viewの作成
-----------------------------------------
resources
     L views
          L ●●●.blade.php　ファイルを作成する
				
			【view】
			<a href="{{ route('products.create') }}"> Create New Product</a>
 
			 <table>
			     <tr>
			         <th>Name</th>
			         <th>Description</th>
			         <th>Price</th>
			         <th>Category ID</th>
			         <th >Action</th>
			     </tr>
			     @foreach ($products as $product)
			     <tr>
			         <!--◆◆◆BladeではPHPのコードを{{と}}で囲むことで変数の中身をそのまま表示◆◆◆-->
			         <td>{{ $product->name }}</td>
			         <td>{{ $product->description }}</td>
			         <td>{{ $product->price }}</td>
			         <td>{{ $product->category_id }}</td>
			         <td>
			             <form action="{{ route('products.destroy',$product->id) }}" method="POST">
			                <a href="{{ route('products.show',$product->id) }}">Show</a>
			                <a href="{{ route('products.edit',$product->id) }}">Edit</a>
			                 @csrf
			                 @method('DELETE')
			                 <button type="submit">Delete</button>
			             </form>
			         </td>
			     </tr>
			     @endforeach
			 </table>	
--------------------------------------------------------------------------------------------------------	

	【◆createコントローラーの設定】
		public function create()
	    {
	         return view('products.create');
	    }
	【◆◆viewの作成】
	resources
	　　　L　views
	　　　　　　L　products
	　　　　　　　　　　L　create.blade.php
						-------------------------------------------------------------------------------------------
						<div>
     						<h2>Add New Product</h2>
						 </div>
						 <div>
						     <a href="{{ route('products.index') }}"> Back</a>
						 </div>
						 
						 <form action="{{ route('products.store') }}" method="POST">
						     @csrf
						 
						     <div>
						         <strong>Name:</strong>
						         <input type="text" name="name" placeholder="Name">
						     </div>
						     <div>
						         <strong>Description:</strong>
						         <textarea style="height:150px" name="description" placeholder="Description"></textarea>
						     </div>
						     <div>
						         <strong>Price:</strong>
						         <input type="number" name="price" placeholder="Price">
						     </div>
						     <div>
						         <button type="submit">Submit</button>
						     </div>
						 
						 </form>

				-------------------------------------------------------------------------------------------

				【★★storeアクション】
				-------------------------------------------------------------------------------------------
					public function store(Request $request)
				    {
				        $product = new Product();
				         $product->name = $request->input('name');
				         $product->description = $request->input('description');
				         $product->price = $request->input('price');
				         $product->save();
				 
				         return to_route('products.index');
				    }	
				    ※return to_route('products.index’);ではデータが保存された後
				    ※リダイレクト（別のページに移動すること）を行っています。
				-------------------------------------------------------------------------------------------	
				
				-------------------------------------------------------------------------------------------	
				【★★showアクション】
				-------------------------------------------------------------------------------------------	
					public function show(Product $product)
				    {
				        return view('products.show', compact('product'));
				    }
			　　  -------------------------------------------------------------------------------------------	
			【★★showViewの作成】
			resources
			　　L　views
			　　　　　L　products
			　　　　　　　　　L　show.blade.php
						-------------------------------------------------------------------------------------------
						<div>
						     <h2> Show Product</h2>
						 </div>
						 <div>
						     <a href="{{ route('products.index') }}"> Back</a>
						 </div>
						 
						 <div>
						     <strong>Name:</strong>
						     {{$product->name}}
						 </div>
						 
						 <div>
						     <strong>Description:</strong>
						     {{$product->description}}
						 </div>
						 
						 <div>
						     <strong>Price:</strong>
						     {{$product->price}} 
						 </div>
						 
						 -------------------------------------------------------------------------------------------
				-------------------------------------------------------------------------------------------	
				【★★editアクション】
				-------------------------------------------------------------------------------------------	
				public function edit(Product $product)
			    {
			        return view('products.edit', compact('product'));
			    }
			 -------------------------------------------------------------------------------------------
			【★★showViewの作成】
			-------------------------------------------------------------------------------------------
			resources
			　　L　views
			　　　　　L　products
			　　　　　　　　　L　edit.blade.php    
			    
							    <div>
								     <h2>Edit Product</h2>
								 </div>
								 <div>
								     <a href="{{ route('products.index') }}"> Back</a>
								 </div>
								 
								 <form action="{{ route('products.update',$product->id) }}" method="POST">
								     @csrf
								     @method('PUT')//【※更新の時はPUT※】
								 
								     <div>
								         <strong>Name:</strong>
								         <input type="text" name="name" value="{{ $product->name }}" placeholder="Name">
								     </div>
								     <div>
								         <strong>Description:</strong>
								         <textarea style="height:150px" name="description" placeholder="description">{{ 											$product->description }}</textarea>
								     </div>
								     <div>
								         <strong>Price:</strong>
								         <input type="number" name="price"  value="{{ $product->price }}">
								     </div>
								     <div>
								         <button type="submit">Submit</button>
								     </div>
								 
								 </form>
								 
				-------------------------------------------------------------------------------------------	
				【★★updateアクション】
				-------------------------------------------------------------------------------------------
				public function update(Request $request, Product $product)
			    {
			        $product->name = $request->input('name');
			         $product->description = $request->input('description');
			         $product->price = $request->input('price');
			         $product->update();
			 
			         return to_route('products.index');
			    }
				-------------------------------------------------------------------------------------------	

				【★★deleteアクション★★】
				-------------------------------------------------------------------------------------------	
				public function destroy(Product $product)
			    {
			        $product->delete();
			  
			         return to_route('products.index');
			    }
			    -------------------------------------------------------------------------------------------	
----------------------------------------
◆5.5商品登録時にカテゴリを選択できるようにする
----------------------------------------　
-------------------------------------------------------------------------------------------	
app
　L　Http　
　　　　L　Controllers
　　　　　　　　L　ProductController.php
-------------------------------------------------------------------------------------------	
　　　　　　　　use App\Models\Category;　//Categoryモデルを使用できるよう宣言
　　　　　　　　
		【★★createアクションの変更】
		public function create()
	    {
	         return view('products.create');
	         $categories = Category::all();
	  
	         return view('products.create', compact('categories'));
	    }
　　　　-------------------------------------------------------------------------------------------	
　　　　【★★create.blade.phpに追加★★】
　　　　-------------------------------------------------------------------------------------------	
　　　　resources
　　　　　　　L　views\products
　　　　　　　　　　　L　create.blade.php
　　　　-------------------------------------------------------------------------------------------	
　　　　<div>
         <strong>Category:</strong>
         <select name="category_id">
         @foreach ($categories as $category)
         <option value="{{ $category->id }}">{{ $category->name }}</option>
         @endforeach
         </select>
    	 </div>
　　　　-------------------------------------------------------------------------------------------	　　　
◆app
　L　Http
　　　L　Controllers
　　　　　　　L　ProductController.php
　　　　　　　　storeアクションでcategory_idをデータベースに保存できるようにします　　　　　　　　
			-------------------------------------------------------------------------------------------	
			【★★storeアクション★★】
			-------------------------------------------------------------------------------------------	
			public function store(Request $request)
		    {
		        $product = new Product();
		        $product->name = $request->input('name');
		        $product->description = $request->input('description');
		        $product->price = $request->input('price');
		         $product->category_id = $request->input('category_id');
		        $product->save();

		        return to_route('products.index');
		    }
		    -------------------------------------------------------------------------------------------	
			-------------------------------------------------------------------------------------------	
			【★★editアクション変更★★】
			-------------------------------------------------------------------------------------------	
			public function edit(Product $product)
		    {
		        $categories = Category::all();
		  
		         return view('products.edit', compact('product', 'categories'));
		    }
			-------------------------------------------------------------------------------------------	
			【★★editビュー変更★★】
			-------------------------------------------------------------------------------------------	
			resources
			　　L　views
			　　　　　L　products
			　　　　　　　　L　edit.blade.php
			-------------------------------------------------------------------------------------------	
			<div>
		         <strong>Category:</strong>
		         <select name="category_id">
		         @foreach ($categories as $category)
		             @if ($category->id == $product->category_id)
		                 <option value="{{ $category->id }}" selected>{{ $category->name }}</option>
		             @else
		                 <option value="{{ $category->id }}">{{ $category->name }}</option>
		             @endif
		         @endforeach
		         </select>
		     </div>
			-------------------------------------------------------------------------------------------	
			
			-------------------------------------------------------------------------------------------	
			【★★updateアクションでCategory_idを保存できるようにする★★】
			-------------------------------------------------------------------------------------------	
			app
			　L　Http
			　　　　L　Controllers
			　　　　　　　　　L　ProductController.php
			-------------------------------------------------------------------------------------------	
			【productContoroller.php】
			【★★updateアクション★★｝
			-------------------------------------------------------------------------------------------	
			public function update(Request $request, Product $product)
		    {
		        $product->name = $request->input('name');
		         $product->description = $request->input('description');
		         $product->price = $request->input('price');
		         $product->category_id = $request->input('category_id');
		         $product->update();
		 
		         return to_route('products.index');
		    }
			-------------------------------------------------------------------------------------------	
			
			

----------------------------------------
●6.1ログイン機能を追加する。
----------------------------------------　
※Laravel UIパッケージをインストール
【コマンド】
composer require laravel/ui

【コマンド】
bootstrapを指定してScaffolding（骨組み）を作成
php artisan ui bootstrap --auth

上記実行するとWarningがでるのでnpmnpm install && npm run devを実行する
【コマンド】
・npm install 

・npm run dev
※それぞれ別々にインストールする。

---------------------------------------------
◆上記コマンドを実行するとweb.phpに下記表示が出力されている
---------------------------------------------
routes
　　L　web.php
---------------------------------------------
Auth::routes();

Route::get('/home', [App\Http\Controllers\HomeController::class, 'index'])->name('home');
-------------------------------------------------------------------------------------------	
-------------------------------------------
6.2 ログイン関連画面のデザインを調整しよう
-------------------------------------------
◆ログイン画面のデザイン調整

resources
　　　L　views
　　　　　　L　auth
　　　　　　　　L　login.blade.php
　　　　　　　　
　　　　　　　　 
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	
				 @extends('layouts.app')<!--★★@extends('layouts.app')　resources\views\layoutsディレクトリ内のapp.blade.phpを使用する事を示している-->
				 @section('content')
				 <div class="container"><!--resources\views\layouts\app.blade.php内の@yeild部分に差し込まれる-->
				     <div class="row justify-content-center">
				         <div class="col-md-5">
				             <h3 class="mt-3 mb-3">ログイン</h3>
				 
				             <hr>
				             <form method="POST" action="{{ route('login') }}">
				                 @csrf
				 
				                 <div class="form-group">
				                     <input id="email" type="email" class="form-control @error('email') is-invalid @enderror samuraimart-login-input" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus placeholder="メールアドレス">
				 
				                     @error('email')
				                     <span class="invalid-feedback" role="alert">
				                         <strong>メールアドレスが正しくない可能性があります。</strong>
				                     </span>
				                     @enderror
				                 </div>
				 
				                 <div class="form-group">
				                     <input id="password" type="password" class="form-control @error('password') is-invalid @enderror samuraimart-login-input" name="password" required autocomplete="current-password" placeholder="パスワード">
				 
				                     @error('password')
				                     <span class="invalid-feedback" role="alert">
				                         <strong>パスワードが正しくない可能性があります。</strong>
				                     </span>
				                     @enderror
				                 </div>
				 
				                 <div class="form-group">
				                     <div class="form-check">
				                         <input class="form-check-input" type="checkbox" name="remember" id="remember" {{ old('remember') ? 'checked' : '' }}>
				 
				                         <label class="form-check-label samuraimart-check-label w-100" for="remember">
				                             次回から自動的にログインする
				                         </label>
				                     </div>
				                 </div>
				 
				                 <div class="form-group">
				                     <button type="submit" class="mt-3 btn samuraimart-submit-button w-100">
				                         ログイン
				                     </button>
				 
				                     <a class="btn btn-link mt-3 d-flex justify-content-center samuraimart-login-text" href="{{ route('password.request') }}">
				                         パスワードをお忘れの場合
				                     </a>
				                 </div>
				             </form>
				 
				             <hr>
				 
				             <div class="form-group">
				                 <a class="btn btn-link mt-3 d-flex justify-content-center samuraimart-login-text" href="{{ route('register') }}">
				                     新規登録
				                 </a>
				             </div>
				         </div>
				     </div>
				 </div>
				 @endsection
-------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	

-------------------------------------------
6.3 スタイルシートを作成
-------------------------------------------
public
  L css
     L samuraimart.css
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		.samuraimart-login-input {
     border-radius: 2px;
     border: solid 1px #b2b2b2;
     background-color: #ffffff;
 }
 
 .samuraimart-check-label {
     font-family: YuGo;
     font-size: 12px;
     font-weight: 500;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #000000;
 }
 
 .samuraimart-require-input-label {
     border-radius: 1px;
     background-color: #e2001b;
 }
 
 .samuraimart-require-input-label-text {
     font-family: YuGo;
     font-size: 14px;
     font-weight: 500;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #ffffff;
 }
 
 .samuraimart-submit-button {
     font-family: YuGo;
     font-size: 14px;
     font-weight: bold;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #ffffff;
     background-color: #0fbe9f;
 }
 
 .samuraimart-login-text {
     font-family: YuGo;
     font-size: 14px;
     font-weight: bold;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #0fbe9f;
 }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
resources
    L views
        L layouts
             L app.blade.phpに先ほど作成した
             ※public\css\samuraimart.cssを読み込むコードを追加します。
　　　　　　【◆追加する】
			<link href="{{ asset('css/samuraimart.css') }}" rel="stylesheet">
			※asset()関数を使用することで、publicディレクトリ配下のファイルにアクセスできる



			
-------------------------------------------
6.4　パスワード再設定画面のデザイン調整
-------------------------------------------
resources
　　　　L　views
　　　　　　　L　auth
　　　　　　　　　　L　passwords
　　　　　　　　　　　　　L　email.blade.php　【●ここパスワード再設定画面が実装されている】
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
							 @extends('layouts.app')
							 
							 @section('content')
							 <div class="container">
							     <div class="row justify-content-center">
							         <div class="col-md-5">
							             <h3 class="mt-3 mb-3">パスワード再設定</h3>
							 
							             <p>
							                 ご登録時のメールアドレスを入力してください。<br>
							                 パスワード再発行用のメールをお送りします。  
							             </p>
							 
							             <hr>
							 
							             @if (session('status'))
							             <div class="alert alert-success" role="alert">
							                 {{ session('status') }}
							             </div>
							             @endif
							 
							 
							             <form method="POST" action="{{ route('password.email') }}">
							                 @csrf
							 
							                 <div class="form-group">
							                     <input id="email" type="email" class="form-control @error('email') is-invalid @enderror samuraimart-login-input" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus placeholder="メールアドレス">
							 
							                     @error('email')
							                     <span class="invalid-feedback" role="alert">
							                         <strong>メールアドレスが正しくない可能性があります。</strong>
							                     </span>
							                     @enderror
							                 </div>
							 
							                 <div class="form-group">
							                     <button type="submit" class="btn samuraimart-submit-button w-100">
							                         送信
							                     </button>
							                 </div>
							             </form>
							         </div>
							     </div>
							 </div>
							 @endsection
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------
6.5　新規アカウント作成画面のデザイン調整
-------------------------------------------
【アカウント画面】
resources
　　　L　views
　　　　　　　L　auth
　　　　　　　　　L　register.blade.php
-------------------------------------------　　　　　　　　　

		@extends('layouts.app')
		 
		 @section('content')
		 <div class="container">
		     <div class="row justify-content-center">
		         <div class="col-md-5">
		             <h3 class="mt-3 mb-3">新規会員登録</h3>
		 
		             <hr>
		 
		             <form method="POST" action="{{ route('register') }}">
		                 @csrf
		 
		                 <div class="form-group row">
		                     <label for="name" class="col-md-5 col-form-label text-md-left">氏名<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input id="name" type="text" class="form-control @error('name') is-invalid @enderror samuraimart-login-input" name="name" value="{{ old('name') }}" required autocomplete="name" autofocus placeholder="侍 太郎">
		 
		                         @error('name')
		                         <span class="invalid-feedback" role="alert">
		                             <strong>氏名を入力してください</strong>
		                         </span>
		                         @enderror
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="email" class="col-md-5 col-form-label text-md-left">メールアドレス<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input id="email" type="email" class="form-control @error('email') is-invalid @enderror samuraimart-login-input" name="email" value="{{ old('email') }}" required autocomplete="email" placeholder="samurai@samurai.com">
		 
		                         @error('email')
		                         <span class="invalid-feedback" role="alert">
		                             <strong>メールアドレスを入力してください</strong>
		                         </span>
		                         @enderror
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="postal_code" class="col-md-5 col-form-label text-md-left">郵便番号<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input type="text" class="form-control @error('postal_code') is-invalid @enderror samuraimart-login-input" name="postal_code" required placeholder="150-0043">
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="address" class="col-md-5 col-form-label text-md-left">住所<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input type="text" class="form-control @error('address') is-invalid @enderror samuraimart-login-input" name="address" required placeholder="東京都渋谷区道玄坂２丁目１１−１">
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="phone" class="col-md-5 col-form-label text-md-left">電話番号<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input type="text" class="form-control @error('phone') is-invalid @enderror samuraimart-login-input" name="phone" required placeholder="03-5790-9039">
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="password" class="col-md-5 col-form-label text-md-left">パスワード<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input id="password" type="password" class="form-control @error('password') is-invalid @enderror samuraimart-login-input" name="password" required autocomplete="new-password">
		 
		                         @error('password')
		                         <span class="invalid-feedback" role="alert">
		                             <strong>{{ $message }}</strong>
		                         </span>
		                         @enderror
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="password-confirm" class="col-md-5 col-form-label text-md-left"></label>
		 
		                     <div class="col-md-7">
		                         <input id="password-confirm" type="password" class="form-control samuraimart-login-input" name="password_confirmation" required autocomplete="new-password">
		                     </div>
		                 </div>
		 
		                 <div class="form-group">
		                     <button type="submit" class="btn samuraimart-submit-button w-100">
		                         アカウント作成
		                     </button>
		                 </div>
		             </form>
		         </div>
		     </div>
		 </div>
		 @endsection

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

【コマンド】※実行
npm install 
npm run dev

【コマンド】
最後にビルドを行う
npm run build


----------------------------------------
●6.1ログイン機能(アカウント作成時メール送信　各種メッセージの日本語化
----------------------------------------　
※二段階認証の設定（smtp）
★セキュリティー２段階プロセスクリックーアプリ選択でメール　デバイス選択でその他（名前を入力）-１６桁のパスワードが設定される

上記情報を.envファイルに設定する。
	
	
	MAIL_MAILER=smtp
	MAIL_HOST=smtp.gmail.com
	MAIL_PORT=587
	MAIL_USERNAME="kf.fff0809@gmail.com"
	MAIL_PASSWORD="自分のパスワード"
	MAIL_ENCRYPTION=tls
	MAIL_FROM_ADDRESS="kf.fff0809@gmail.com"
	MAIL_FROM_NAME="${APP_NAME}"
	
	
----------------------------------------
●6.2　ユーザーモデルにメール送信機能を実装
----------------------------------------　	
	app
	　L　Models
	　　　　L　User.php
---------------------------------------------
●use Illuminate\Contracts\Auth\MustVerifyEmail;//★宣言追加

●class User extends Authenticatable implements MustVerifyEmail　//Authenticatableの継承は変わらないがimplements MustVerifyEmailでメール送信クラスの定義を追加している

----------------------------------------
●6.3　送信するメールの日本語化
----------------------------------------
esources
    L views
    上記階層に送信するメールのテンプレートとなっているビューを作成する。
    【コマンド】
    ◆php artisan vendor:publish --tag=laravel-notifications
    

◆resources
　　　L　views
　　　　　　L　vendor
　　　　　　　　　L　notifications
　　　　　　　　　　　　　　L　email.blade.php
　　　　　　　　　　　　　　上記コマンドで作成されたemail.blade.phpを編集して日本語にする。
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
　　　　　　　　　　　　　　@lang('こんにちは!')//

							@lang('宜しくお願いします。'),<br>
							
							@lang(":actionText ボタンが利用できない場合は、以下のURLをコピー＆ペーストしてブラウザから直接アクセスしてください。\n",
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------
●6.3.2　送信するメール本文の日本語化
----------------------------------------

★php artisan make:notification CustomVerifyEmailを実行し、メールを送信する際の本文などを実装するファイルを作成します。
【コマンド】
◆php artisan make:notification CustomVerifyEmail
　app
　　L　Notifications
　　　　　　　　L　CustomVerifyEmail.php
					【★CustomVerifyEmail.phpの中身を日本語に変更】
					--------------------------------------------------------------------------------------
					use Illuminate\Auth\Notifications\VerifyEmail;VerifyEmailを宣言
					class CustomVerifyEmail extends VerifyEmail//VerifyEmailの派生クラスを作成(
					※クラスCustomVerifyEmailのVerifyEmailを定義することで、 メール認証を有効にします。※
					
					＜＜＜＜★★★※【__()】 で囲むことで、日本語や英語などの言語設定に対応したメッセージに変更できます＞＞＞＞
					
					->line(__('Verify Your Email Address'))
                    ->action(__('Verify Email Address'), $this->verificationUrl($notifiable))
                    ->line(__('If you did not create an account, no further action is required.'));
					--------------------------------------------------------------------------------------


----------------------------------------
●6.3.3　送信するメールをユーザーに結びつける
----------------------------------------
app
　L　Models
　　　　L　User.php
------------------------------------------------
		【User.php】
		 ◆use App\Notifications\CustomVerifyEmail;

			public function sendEmailVerificationNotification()//functionの追加
		     {
		         $this->notify(new CustomVerifyEmail());//CustomVerifyEmail()のインスタンスをセット
		         
		     }



----------------------------------------
●6.3.4　パスワードリセット時のメール内容を変更
----------------------------------------
【コマンド】
◆php artisan make:notification CustomResetPassword

app
　L　Notifications
　　　　　　L　CustomResetPassword.php
				【CustomResetPassword.php】
				◆use Illuminate\Auth\Notifications\ResetPassword;
				
				◆class CustomResetPassword extends ResetPassword　//ResetPasswordからの継承クラスに変更
		
				◆public $token;//グローバルスコープの変数を一つ用意
				◆	public function __construct($token)
				    {
				        $this->token=$token;//パラメータで受けた$tokenをtokenにセット
				    }



				◆	public function toMail($notifiable)
				    {
				        //【★new MailMessageの処理として下記を追加】
				        //パスワードを再発行するメールには、トークンを含んだURLにする必要があるため、$tokenを利用します。
				        return (new MailMessage)
				        ->line(__('Click button below and reset password.'))
				        ->action(__('Reset password'), url(route('password.reset', $this->token, false)))
				        ->line(__('If you did not request a password reset, no further action is required.'));
				    }
------------------------------------------------------------------------------------------------------------------------------



----------------------------------------
●6.3.5　送信するメールをuserに紐づける
----------------------------------------
-----------------------------------------------------------------------------------------------------------
app
　L　Models
　　　　L　User.php
-----------------------------------------------------------------------------------------------------------
			【User.php】
			◆use App\Notifications\CustomResetPassword;//宣言【CustomResetPassword】
			
			◆public function sendPasswordResetNotification($token) 
			{
         		$this->notify(new CustomResetPassword($token));
     		}
-----------------------------------------------------------------------------------------------------------

----------------------------------------
●6.3.6　キーを設定し、その対応するキーに日本語を記載して外部ファイル的に使用する
----------------------------------------
aravel-samuraimart
　　　　　L　lang
　　　　　　　　L　ja.json　//このファイルを作成してキーに対応する日本語一覧を記載
----------------------------------------
				【ja.json】
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				 {
				   "Login": "ログイン",
				   "E-Mail Address": "メールアドレス",
				   "Password": "パスワード",
				   "Remember Me": "ログイン状態を保存する",
				   "Forgot Your Password?": "パスワードをお忘れですか ?",
				   "Register": "登録",
				   "Name": "お名前",
				   "Confirm Password": "パスワード(確認用)",
				   "Reset Password": "パスワードリセット",
				   "Send Password Reset Link": "パスワードリセットリンク送信",
				   "Logout": "ログアウト",
				   "Verify Your Email Address": "「メールアドレス確認」ボタンをクリックして、ユーザ登録を完了してください",
				   "A fresh verification link has been sent to your email address.": "新しいリンクをあなたのメールアドレスに送信しました。",
				   "Before proceeding, please check your email for a verification link.": "メールに記載されているリンクをクリックして、登録手続きを完了してください。",
				   "If you did not receive the email": "メールが届いていなければ、",
				   "click here to request another": "こちらをクリックして再送信してください。",
				   "Please click the link below to verify your email address.": "メールアドレスを確認するために下のリンクをクリックしてください。",
				   "Verify Email Address": "メールアドレス確認",
				   "If you did not create an account, no further action is required.": "心当たりがない場合は、本メッセージは破棄してください。",
				   "Click button below and reset password.": "下のボタンをクリックしてパスワードを再設定してください。",
				   "If you did not request a password reset, no further action is required.": "心当たりがない場合は、本メッセージは破棄してください。"
				 }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------
●6.3.7　日本語化最終設定　ja.jasonファイルのlocalにjaをセットして終了
----------------------------------------
config
  L app.php
  　　'locale' => 'en',　　　　を　　　　'locale' => 'ja'
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－-----


----------------------------------------
●6.4　アカウント作成後のリダイレクト先を変更する
----------------------------------------
app
 L Http
     L Controllers
             L Auth
                 L RegisterController.php
					【★RegisterController.php】
					　protected $redirectTo = '/email/verify';	//リダイレクト先を変更
					　
					　
					　

◆ルーティングのリダイレクト先を変更する
-------------------------------------------------------
routes　
　L　web.php
-------------------------------------------------------
			【web.php】
			Route::resource('products', ProductController::class)->middleware(['auth', 'verified']);
 			Auth::routes(['verify' => true]);
			－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
			※これで、メールでの認証が済んでいない場合は、商品のCRUD画面には遷移せず、メール送信画面へと遷移します。
			--------------------------------------------------------------------------------------------------------


-------------------------------------
◆ログイン後のリダイレクト先の変更
-------------------------------------
	app
	 L Http
	     L Controllers 
	            L Auth
	                L LoginController.php
						【LoginController.php】
						◆protected $redirectTo = '/';//リダイレクト先を現在地へ登録
						
---------------------------------------------------
◆アカウント作成後のメール送信画面のデザイン修正
---------------------------------------------------

resources
     L views
         L auth
            L verify.blade.php
				【verify.blade.php】
------------------------------------------------------------------------------------------------------------------------------------------------------
				◆@extends('layouts.app')
 
				 @section('content')
				 <div class="container">
				     <div class="row justify-content-center">
				         <div class="col-md-5">
				             <h3 class="text-center">会員登録ありがとうございます！</h3>
				 
				             <p class="text-center">
				                 現在、仮会員の状態です。  
				             </p>
				 
				             <p class="text-center">
				                 ただいま、ご入力頂いたメールアドレス宛に、ご本人様確認用のメールをお送りしました。  
				             </p>
				 
				             <p class="text-center">
				                 メール本文内のURLをクリックすると本会員登録が完了となります。  
				             </p>
				             <div class="text-center">
				                 <a href="{{ url('/') }}" class="btn samuraimart-submit-button w-50 text-white">トップページへ</a>
				             </div>
				         </div>
				     </div>
				 </div>
				 @endsection
------------------------------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------
●8章 CSSフレームワークを使おう】********************************************************************
-------------------------------------------------------------------------------------------



resources
　　　L　views
　　　　　　L　layouts
　　　　　　　　　L　app.blade.php　　マージンを付けるためにmb-5クラスを追加
　　　　　　　　　
　　　　　　　　　 <main class="py-4 mb-5">
		            @yield('content')
		        </main>
		    </div>
		</body>
		</html>


※マージンをつけるのは後々フッターを下部に固定する際に、ページ全体が下にズレてしまうことを回避するためです。


--------------------------------------------------------------------------------
●8.2商品一覧ページ
--------------------------------------------------------------------------------
resources
    L views
        L products
              L index.blade.php
			--------------------------------------------------------------------------------------------
				 @extends('layouts.app')
				 
				 @section('content')
				 <div class="row">
				     <div class="col-9">
				         <div class="container mt-4">
				             <div class="row w-100">
				                 @foreach($products as $product)
				                 <div class="col-3">
				                     <a href="{{route('products.show', $product)}}">
				                         <img src="{{ asset('img/dummy.png')}}" class="img-thumbnail">
				                     </a>
				                     <div class="row">
				                         <div class="col-12">
				                             <p class="samuraimart-product-label mt-2">
				                                 {{$product->name}}<br>
				                                 <label>￥{{$product->price}}</label>
				                             </p>
				                         </div>
				                     </div>
				                 </div>
				                 @endforeach
				             </div>
				         </div>
				     </div>
				 </div>
				 @endsection
				-----------------------------------------------------------------------------------------
				
				
				
--------------------------------------------------------------------------------
●8.3商品画像を入れる
--------------------------------------------------------------------------------				
				public
　　　　　　　　　L　img
　　　　　　　　　　　L　dummy.pngファイルを置く
　　　　　　　※画像やCSSはここから参照する
　　　　　　　


--------------------------------------------------------------------------------
●8.3商品作成ページ
--------------------------------------------------------------------------------				
resources
　　　L　views
　　　　　　L　products
　　　　　　　　　L　create.blade.php
----------------------------------------------------------------------------------
	@extends('layouts.app')
 
	 @section('content')
	 <div class="container">
	     <h1>新しい商品を追加</h1>
	 
	     <form action="{{ route('products.store') }}" method="POST">
	         @csrf
	         <div class="form-group">
	             <label for="product-name">商品名</label>
	             <input type="text" name="name" id="product-name" class="form-control">
	         </div>
	         <div class="form-group">
	             <label for="product-description">商品説明</label>
	             <textarea name="description" id="product-description" class="form-control"></textarea>
	         </div>
	         <div class="form-group">
	             <label for="product-price">価格</label>
	             <input type="number" name="price" id="product-price" class="form-control">
	         </div>
	         <div class="form-group">
	             <label for="product-category">カテゴリ</label>
	             <select name="category_id" class="form-control" id="product-category">
	                 @foreach ($categories as $category)
	                     <option value="{{ $category->id }}">{{ $category->name }}</option>
	                 @endforeach
	             </select>
	         </div>
	         <button type="submit" class="btn btn-success">商品を登録</button>
	     </form>
	 
	     <a href="{{ route('products.index') }}">商品一覧に戻る</a>
	 </div>
	 @endsection
---------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------
●8.3商品閲覧ページ
--------------------------------------------------------------------------------
resources
　L　views
　　　　L　products
　　　　　　　　L　show.blade.php
	------------------------------------------------------------------------------------------------

				@extends('layouts.app')
 
				 @section('content')
				 
				 <div class="d-flex justify-content-center">
				     <div class="row w-75">
				         <div class="col-5 offset-1">
				             <img src="{{ asset('img/dummy.png')}}" class="w-100 img-fluid">
				         </div>
				         <div class="col">
				             <div class="d-flex flex-column">
				                 <h1 class="">
				                     {{$product->name}}
				                 </h1>
				                 <p class="">
				                     {{$product->description}}
				                 </p>
				                 <hr>
				                 <p class="d-flex align-items-end">
				                     ￥{{$product->price}}(税込)
				                 </p>
				                 <hr>
				             </div>
				             @auth
				             <form method="POST" class="m-3 align-items-end">
				                 @csrf
				                 <input type="hidden" name="id" value="{{$product->id}}">
				                 <input type="hidden" name="name" value="{{$product->name}}">
				                 <input type="hidden" name="price" value="{{$product->price}}">
				                 <div class="form-group row">
				                     <label for="quantity" class="col-sm-2 col-form-label">数量</label>
				                     <div class="col-sm-10">
				                         <input type="number" id="quantity" name="qty" min="1" value="1" class="form-control w-25">
				                     </div>
				                 </div>
				                 <input type="hidden" name="weight" value="0">
				                 <div class="row">
				                     <div class="col-7">
				                         <button type="submit" class="btn samuraimart-submit-button w-100">
				                             <i class="fas fa-shopping-cart"></i>
				                             カートに追加
				                         </button>
				                     </div>
				                     <div class="col-5">
				                         <a href="/products/{{ $product->id }}/favorite" class="btn samuraimart-favorite-button text-dark w-100">
				                             <i class="fa fa-heart"></i>
				                             お気に入り
				                         </a>
				                     </div>
				                 </div>
				             </form>
				             @endauth
				         </div>
				 
				         <div class="offset-1 col-11">
				             <hr class="w-100">
				             <h3 class="float-left">カスタマーレビュー</h3>
				         </div>
				 
				         <div class="offset-1 col-10">
				             <!-- レビューを実装する箇所になります -->
				         </div>
				     </div>
				 </div>
				 @endsection
　　　　　　　　------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------
●8.3商品編集ページ
--------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　products
　　　　　　　　　　L　edit.blade.php

----------------------------------------------------------------------------------
		 @extends('layouts.app')
 
		 @section('content')
		 <div class="container">
		     <h1>商品情報更新</h1>
		 
		     <form action="{{ route('products.update',$product->id) }}" method="POST">
		         @csrf
		         @method('PUT')
		         <div class="form-group">
		             <label for="product-name">商品名</label>
		             <input type="text" name="name" id="product-name" class="form-control" value="{{ $product->name }}">
		         </div>
		         <div class="form-group">
		             <label for="product-description">商品説明</label>
		             <textarea name="description" id="product-description" class="form-control">{{ $product->description }}</textarea>
		         </div>
		         <div class="form-group">
		             <label for="product-price">価格</label>
		             <input type="number" name="price" id="product-price" class="form-control" value="{{ $product->price }}">
		         </div>
		         <div class="form-group">
		             <label for="product-category">カテゴリ</label>
		             <select name="category_id" class="form-control" id="product-category">
		                 @foreach ($categories as $category)
		                 @if ($category->id == $product->category_id)
		                 <option value="{{ $category->id }}" selected>{{ $category->name }}</option>
		                 @else
		                 <option value="{{ $category->id }}">{{ $category->name }}</option>
		                 @endif
		                 @endforeach
		             </select>
		         </div>
		         <button type="submit" class="btn btn-danger">更新</button>
		     </form>
		 
		     <a href="{{ route('products.index') }}">商品一覧に戻る</a>
		 </div>
		 @endsection

----------------------------------------------------------------------------------

--------------------------------------------------------------------------------
●8.3 Font Awesomeを導入しよう
--------------------------------------------------------------------------------
Font AwesomeとはGitHubなどで見かける、アイコンを提供しているライブラリです。
ECサイトなどでカートのアイコンなどがありますが、そういったアイコンなどもFont Awesomeで使用できます。

◆無料でスタートを選んで、アカウントを作成。
◆自分のkitが作成されたら、そのURLをVIewへ張り付ける


--------------------------------------------------------------------------------
●8.4 スタイルを追加しよう
--------------------------------------------------------------------------------
public
　　L　css
　　　　L　samuraimart.cs
----------------------------------------------------------------------------
上記ファイルの一番上に下記を追加
	 		@font-face {
			   font-family: YuGo;
			   src: local(YuGo-Medium),
			     url(/path/to/YuGo-Medium.woff2) format("woff2"),
			     url(/path/to/YuGo-Medium.woff) format("woff"),
			     url(/path/to/YuGo-Medium.ttf) format("truetype");
			   font-weight: 500;
			   font-style: normal;
			   font-stretch: normal;
			 }
			 
			 @font-face {
			   font-family: YuGo;
			   src: local(YuGo-Bold),
			     url(/path/to/YuGo-Bold.woff2) format("woff2"),
			     url(/path/to/YuGo-Bold.woff) format("woff"),
			     url(/path/to/YuGo-Bold.ttf) format("truetype");
			   font-weight: bold;
			   font-style: normal;
			   font-stretch: normal;
			 }
			 
			 h1 {
			   font-family: YuGo;
			   font-size: 26px;
			   font-weight: bold;
			   font-stretch: normal;
			   font-style: normal;
			   line-height: normal;
			   letter-spacing: -0.13px;
			 }
			 
			 h2 {
			   font-family: YuGo;
			   font-size: 22px;
			   font-weight: bold;
			   font-stretch: normal;
			   font-style: normal;
			   line-height: normal;
			   letter-spacing: normal;
			 }
			 
			 h3 {
			   font-family: YuGo;
			   font-size: 18px;
			   font-weight: bold;
			   font-stretch: normal;
			   font-style: normal;
			   line-height: normal;
			   letter-spacing: 0.04px;
			 }
			 
			 big {
			   font-family: YuGo;
			   font-size: 16px;
			   font-weight: 500;
			   font-stretch: normal;
			   font-style: normal;
			   line-height: normal;
			   letter-spacing: 0.08px;
			 }
			 
			 body {
			   font-family: YuGo;
			   font-size: 14px;
			   font-weight: 500;
			   font-stretch: normal;
			   font-style: normal;
			   line-height: normal;
			   letter-spacing: 0.11px;
			 }
			 
			 caption {
			   font-family: YuGo;
			   font-size: 12px;
			   font-weight: 500;
			   font-stretch: normal;
			   font-style: normal;
			   line-height: normal;
			   letter-spacing: 0.08px;
			 }
			 
			 label {
			   font-family: YuGo;
			   font-size: 14px;
			   font-weight: bold;
			   font-stretch: normal;
			   font-style: normal;
			   line-height: normal;
			   letter-spacing: normal;
			   color: #191919;
			 }
-------------------------------------------------------------------------


--------------------------------------------------------------------------------
●9.1 ヘッダーを追加しよう
--------------------------------------------------------------------------------
resouces
    L views
         L layouts
              L app.blade.php
--------------------------------------------------------------------------------

◆.envファイルの下記を変更
	 APP_NAME=Samuraimart
	 
	 
--------------------------------------------------------------------------------
●9.2 コンポーネントを理解しよう headerのコンポーネントの作成
--------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　components
　　　　　　　　　　L header.blade.phpを作成
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
　　　　　　　　　　<nav class="navbar navbar-expand-md navbar-light shadow-sm samuraimart-header-container">
				   <div class="container">
				     <a class="navbar-brand" href="{{ url('/') }}">
				       {{ config('app.name', 'Laravel') }}
				     </a>
				     <form class="row g-1">
				       <div class="col-auto">
				         <input class="form-control samuraimart-header-search-input">
				       </div>
				       <div class="col-auto">
				         <button type="submit" class="btn samuraimart-header-search-button"><i class="fas fa-search samuraimart-header-search-icon"></i></button>
				       </div>
				     </form>
				     <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="{{ __('Toggle navigation') }}">
				       <span class="navbar-toggler-icon"></span>
				     </button>
				 
				     <div class="collapse navbar-collapse" id="navbarSupportedContent">
				       <!-- Right Side Of Navbar -->
				       <ul class="navbar-nav ms-auto mr-5 mt-2">
				         <!-- Authentication Links -->
				         @guest
				         <li class="nav-item mr-5">
				           <a class="nav-link" href="{{ route('register') }}">{{ __('Register') }}</a>
				         </li>
				         <li class="nav-item mr-5">
				           <a class="nav-link" href="{{ route('login') }}">{{ __('Login') }}</a>
				         </li>
				         <hr>
				         <li class="nav-item mr-5">
				           <a class="nav-link" href="{{ route('login') }}"><i class="far fa-heart"></i></a>
				         </li>
				         <li class="nav-item mr-5">
				           <a class="nav-link" href="{{ route('login') }}"><i class="fas fa-shopping-cart"></i></a>
				         </li>
				         @else
				         <li class="nav-item mr-5">
				           <a href="{{ route('logout') }}" onclick="event.preventDefault(); document.getElementById('logout-form').submit();">
				             ログアウト
				           </a>
				 
				           <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
				             @csrf
				           </form>
				         </li>
				         @endguest
				       </ul>
				     </div>
				   </div>
				 </nav>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

◆作成したコンポーネントを表示する為に下記に実装
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　layout
　　　　　　　　　L　app.blade.php
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------　　　　　　　
					<!doctype html>
					<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
					<head>
					    <meta charset="utf-8">
					    <meta name="viewport" content="width=device-width, initial-scale=1">

					    <!-- CSRF Token -->
					    <meta name="csrf-token" content="{{ csrf_token() }}">

					    <title>{{ config('app.name', 'Laravel') }}</title>

					    <!-- Fonts -->
					    <link rel="dns-prefetch" href="//fonts.gstatic.com">
					    <link href="https://fonts.bunny.net/css?family=Nunito" rel="stylesheet">

					    <!-- Scripts -->
					    @vite(['resources/sass/app.scss', 'resources/js/app.js'])
					    <script src="https://kit.fontawesome.com/2797a22fbb.js" crossorigin="anonymous"></script> 
					    <!-- Styles -->
					     <link href="{{ asset('css/samuraimart.css') }}" rel="stylesheet">
					</head>
					<body>
					    <div id="app">
					        @component('components.header')<!--コンポーネントの呼び出し-->
					        @endcomponent

					        <main class="py-4 mb-5">
					            @yield('content')
					        </main>
					    </div>
					</body>
					</html>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

◆作成したコンポーネントをCSSを追加
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
public
　　L　css
　　　　L　samuraimart.css
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	.samuraimart-header-container {
	     box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1);
	     background-color: #ffffff;
	 }
	 
	 .samuraimart-header-search-input {
	     border: solid 1px #e5e5e5;
	 }
	 
	 .samuraimart-header-search-button {
	     background-color: #0fbe9f;
	 }
	 
	 .samuraimart-header-search-icon {
	     color: #ffffff;
	 }
	 
	 .samuraimart-header-fav-icon {
	     color: #191919;
	 }
	 
	 .samuraimart-header-shoppingcart-icon {
	     color: #ffffff;
	 }
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
※【追加する】

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

◆ヘッダーにロゴを追加　　　【public\imgディレクトリにlogo.jpg　画像を保存】
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　components
　　　　　　　　　　L　header.blade.php　//ここにlogo.jpgファイルを呼ぶように記載。
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
					<img src="{{asset('img/logo.jpg')}}">　<!--//asset関数を使うことで、publicディレクトリ配下の画像ファイルなどにアクセス-->

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------
●10章 フッターを追加しよう
--------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　components
　　　　　　　　　　L　footer.blade.php　【ファイルを作成】
　　　　　　　　　　※【以下のコードを貼り付けます。】
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
					 <nav class="navbar navbar-expand-md navbar-light bg-white shadow-sm fixed-bottom mt-5">　<!--fixed-bottomとしてフッターを固定-->
					     <a class="navbar-brand mx-auto" href="{{ url('/') }}">
					         <img src="{{asset('img/logo.jpg')}}" class="img-fluid">
					     </a>
					 </nav>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
◆フッターコンポーネントを表示する
--------------------------------------------------------------------------------
resources
　　L　views
　　　　　L　layout
　　　　　　　　L　app.blade.php
--------------------------------------------------------------------------------

			 	@component('components.footer')
         		@endcomponent
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
●11章 レビュー機能を追加しよう
--------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
◆11.1 モデルを作成しよう
----------------------------------------------------------------------------------------------
【コマンド】
php artisan make:model Review -m

※上記で作成されたモデルを変更
--------------------------------------------------------------------------------
database
　　　L　migrations
　　　　　　　　L　XXXX_XX_XX_XXXXXX_create_reviews_table.php
--------------------------------------------------------------------------------
			up　functionに　下記定義追加】
			$table->text('content');
            $table->integer('product_id');
            $table->integer('user_id');
--------------------------------------------------------------------------------
※定義を行ったら必ずmaigrate
--------------------------------------------------------------------------------
【コマンド】
php artisan migrate
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
●11.2 ユーザーや商品とレビューを紐づけよう
--------------------------------------------------------------------------------
◆商品とレビューの紐づけ
app
　LModel
　　　L　Product.php
--------------------------------------------------------------------------------
	public function reviews()
     {
         return $this->hasMany('App\Models\Review');//【商品とレビューは１商品対多レビュー】
     }
　　　
◆app
　　L　Models
　　　　　L　Review.php
--------------------------------------------------------------------------------
		public function product()
	     {
	         return $this->belongsTo('App\Models\Product');//【レビューと商品は１対１レビュー】
	     }
--------------------------------------------------------------------------------

◆ユーザーとレビューの紐づけ
--------------------------------------------------------------------------------
app
　
　L Models
　　　　L　User.php
--------------------------------------------------------------------------------　　　　
		public function reviews()
     	{
        	 return $this->hasMany('App\Models\Review');//【１ユーザーは複数のレビューを書けるので１対多】
     	}
--------------------------------------------------------------------------------

◆レビュー側へのユーザーの定義
app
　L　Models
　　　　L Review.php
--------------------------------------------------------------------------------
				public function user()
			     {
			         return $this->belongsTo('App\Models\User');//【レビューは１人のユーザーが記載するので１対１】
			     }
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
●11.3 コントローラーを作成しよう
--------------------------------------------------------------------------------

【コマンド】
php artisan make:controller ReviewController --model=Review
※オプションの--model=Reviewを付けることでreviewモデルを使用するコントローラーを作成できる
--------------------------------------------------------------------------------
◆作成されたコントローラーの編集
--------------------------------------------------------------------------------
app
　L　Http
　　　　L　Controllers
　　　　　　　　　L　ReviewController.php
--------------------------------------------------------------------------------　　　　　　　　　
 				use Illuminate\Support\Facades\Auth;//ファザードを使用できるよう定義
 				※index・create・update・edit・destroyは使用しないので削除
---------------------------------------------------------------------------------------------------------------------------------------------------------------- 				
 				public function store(Request $request)
			    {
			         //
			         $request->validate([
			             'content' => 'required'
			         ]);
			 
			         $review = new Review();
			         $review->content = $request->input('content');
			         $review->product_id = $request->input('product_id');
			         $review->user_id = Auth::user()->id;
			         $review->save();
			 
			         return back();
			    }
----------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
●11.4 ルーティングを設定しよう
--------------------------------------------------------------------------------
routes
　　L　web.php
----------------------------------------------------------------------------------------------------------------------------------------------------------------
		use App\Http\Controllers\ReviewController;//作成したreviewコントローラーを使用できるよう宣言
		
		Route::post('reviews', [ReviewController::class, 'store'])->name('reviews.store');//【Reviewコントローラーのstoreファンクションを呼ぶようにルーティング】
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------	

--------------------------------------------------------------------------------
●11.5 VIEWの作成
--------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　products
　　　　　　　　　L　show.blade.php
----------------------------------------------------------------------------------------------------------------------------------------------------------------　　　　　　　　　
		            <div class="row">
	                 @foreach($reviews as $review)
	                 <div class="offset-md-5 col-md-5">
	                     <p class="h3">{{$review->content}}</p>
	                     <label>{{$review->created_at}} {{$review->user->name}}</label>
	                 </div>
	                 @endforeach
	             </div><br />
	 
	             @auth　<!--【※ユーザーがログインしている状態か判断】-->
	             <div class="row">
	                 <div class="offset-md-5 col-md-5">
	                     <form method="POST" action="{{ route('reviews.store') }}">
	                         @csrf
	                         <h4>レビュー内容</h4>
	                         @error('content')
	                             <strong>レビュー内容を入力してください</strong>
	                         @enderror
	                         <textarea name="content" class="form-control m-2"></textarea>
	                         <input type="hidden" name="product_id" value="{{$product->id}}">
	                         <button type="submit" class="btn samuraimart-submit-button ml-2">レビューを追加</button>
	                     </form>
	                 </div>
	             </div>
	             @endauth
----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
◆ProductControllerコントローラーのstoreアクションを編集する
-----------------------------------------------------------------------------------------
app
　L　Http
　　　　L　Controllers
　　　　　　　　　L　ProductController.php　//商品controllerでレビューの全て取得と商品ページにproductとreviewの配列データを引数として渡す処理
-----------------------------------------------------------------------------------------

				public function show(Product $product)
			    {
			        $reviews = $product->reviews()->get();
			  
			        return view('products.show', compact('product', 'reviews'));
			    }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
※$reviews = $product->reviews()->get();では商品についての全てのレビューを取得して$reviewsに保存しています。
※取得したレビューをcompact関数でビューへと渡しています。
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
●12章 お気に入り機能を追加しよう
-----------------------------------------------------------------------------------------

laravel-favorite をインストール
【お気に入り機能】

【コマンド】
composer require overtrue/laravel-favorite

※必ずマイグレーション
【コマンド】
php artisan migrate


-----------------------------------------------------------------------------------------
●12.2 ユーザーと商品の紐づけユーザーとProductsそれぞれにFavorite機能を使用できるように設定
-----------------------------------------------------------------------------------------
app
　L　Models
　　　　L　Product.php
-----------------------------------------------------------------------------------------
 use Overtrue\LaravelFavorite\Traits\Favoriteable;//Favoriteable機能を使用できるよう宣言
 use HasFactory, Favoriteable;　　　　
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
◆ユーザーphp
-----------------------------------------------------------------------------------------
app
　L　Models
　　　　L　User.php
-----------------------------------------------------------------------------------------　　　
use Overtrue\LaravelFavorite\Traits\Favoriter;

use HasApiTokens, HasFactory, Notifiable, Favoriter;
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
◆コントロールアクションを追加
-----------------------------------------------------------------------------------------
app
　L　Http
　　　L　Controllers
　　　　　　　L　ProductController.php
-----------------------------------------------------------------------------------------
 use Illuminate\Support\Facades\Auth;

	　public function favorite(Product $product)
     {
         Auth::user()->togglefavorite($product);
 
         return back();
     }
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
◆12.4 ルーティングを追加しよう
-----------------------------------------------------------------------------------------
routes
　　L　web.php
　　
-----------------------------------------------------------------------------------------
Route::get('products/{product}/favorite', [ProductController::class, 'favorite'])->name('products.favorite');
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
◆12.5 ビューを修正しよう
-----------------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　products
　　　　　　　　　　L　show.blade.php
-----------------------------------------------------------------------------------------

						@if($product->isFavoritedBy(Auth::user()))
                         <a href="{{ route('products.favorite', $product) }}" class="btn samuraimart-favorite-button text-favorite w-100">
                             <i class="fa fa-heart"></i>
                             お気に入り解除
                         </a>
                         @else
                         <a href="{{ route('products.favorite', $product) }}" class="btn samuraimart-favorite-button text-favorite w-100">
                             <i class="fa fa-heart"></i>
                             お気に入り
                         </a>
                         @endif
-----------------------------------------------------------------------------------------
※route('products.favorite', $product)とすることで、商品情報をfavoriteアクションへ


-----------------------------------------------------------------------------------------
◆12.5 CSSに追加
-----------------------------------------------------------------------------------------

public
　　L　css
　　　　L　samuraimart.css
-----------------------------------------------------------------------------------------
.samuraimart-favorite-button {
     border-radius: 2px;
     border: solid 1px #0fbe9f;
     background-color: #ffffff;
 }
 
 .text-favorite {
     color: #0fbe9f;
 }



----------------------------------------------------------
●13章 ページネーションを追加しよう
----------------------------------------------------------
※コンテンツの多い時に複数のページに分割する機能
例）商品数が多い時等、ページ番号部分がページネーション
ページ番号のリンク
-------------------------------------------------------------
◆13.1 コントローラを修正しよう
-------------------------------------------------------------
app
 L Http
     L Controllers
             L ProductController.php
--------------------------------------------------------------
$products = Product::paginate(15);//ページを15ページまで作成

---------------------------------------------------------------
●13.2 ビューを修正しよう
---------------------------------------------------------------
resources
　　　L　views
　　　　　　L　products
　　　　　　　　　L　index.blade.php
---------------------------------------------------------------
 {{ $products->links() }}

------------------------------------------------------------------
●13.3 サービスプロバイダを修正しよう
-------------------------------------------------------------------
app
　L　Providers
　　　　　　L　AppServiceProvider.php
--------------------------------------------------------------------

 use Illuminate\Pagination\Paginator;

	public function boot()
    {
        Paginator::useBootstrap();
    }

--------------------------------------------------------------------
●14章 カテゴリでの絞り込み機能を追加しよう
--------------------------------------------------------------------
◆コントローラーを修正しよう
app
　L　Http
　　　L　Controllers
　　　　　　　L　ProductController.php
----------------------------------------------------------------------
		$categories = Category::all();
        $major_category_names = Category::pluck('major_category_name')->unique();
		return view('products.index', compact('products', 'categories', 'major_category_names'));
----------------------------------------------------------------------
※Category::pluck('major_category_name')->unique();は、全カテゴリーのデータからmajor_category_nameの
※カラムのみを取得します。その上でunique()を使い、重複している部分を削除しています。

--------------------------------------------------------------------------
◆ビューを修正しよう　カテゴリの一覧を左に出力する処理
--------------------------------------------------------------------------
resources
　　L views
　　　　L　components
　　　　　　　L　sidebar.blade.php//ファイル作成
--------------------------------------------------------------------------
<div class="container">
     @foreach ($major_category_names as $major_category_name)
         <h2>{{ $major_category_name }}</h2>
         @foreach ($categories as $category)
             @if ($category->major_category_name === $major_category_name)
                 <label class="samuraimart-sidebar-category-label"><a href="#">{{ $category->name }}</a></label>
             @endif
         @endforeach
     @endforeach
 </div>
--------------------------------------------------------------------------
※カテゴリーの大分類（$major_category_names）をforeach文でループ処理して表示します。
さらに、大分類に属するカテゴリーをforeach文でループ処理します。そうすることで、
大分類ごとに各カテゴリーを並べて表示することができます。
--------------------------------------------------------------------------

--------------------------------------------------------------------------
◆サイドバーをコンポーネントとして呼び出す処理
--------------------------------------------------------------------------
--------------------------------------------------------------------------
resources
　　L　views
　　　　　L　products
　　　　　　　　　L　index.blade.php
--------------------------------------------------------------------------
	<div class="col-2">
         @component('components.sidebar', ['categories' => $categories, 'major_category_names' => $major_category_names])
         @endcomponent
     </div> 
--------------------------------------------------------------------------

--------------------------------------------------------------------------
◆サイドバーのCSSを追加
--------------------------------------------------------------------------
public
　　L　css
　　　　L　samuraimart.css
--------------------------------------------------------------------------
	.samuraimart-sidebar-category-label {
     width: 156px;
     height: 20px;
     font-family: YuGo;
     font-size: 13px;
     font-weight: 500;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #191919;
 }
--------------------------------------------------------------------------

--------------------------------------------------------------------------
◆14.2 カテゴリーで絞り込もう
--------------------------------------------------------------------------
◆コントローラーの修正
app
　L Http
　　　L　Controllers
　　　　　　　L　ProductController.php
--------------------------------------------------------------------------
public function index(Request $request)
    {
        //$products=Product::all();
        if ($request->category !== null) {
            $products = Product::where('category_id', $request->category)->paginate(15);
            $total_count = Product::where('category_id', $request->category)->count();
            $category = Category::find($request->category);
        } else {
            $products = Product::paginate(15);
            $total_count = "";
            $category = null;
        }
        $categories = Category::all();
        $major_category_names = Category::pluck('major_category_name')->unique();

         //return view('products.index', compact('products'));
         return view('products.index', compact('products', 'category', 'categories', 'major_category_names', 'total_count'));
        }
    
    // 後略
    
    }


--------------------------------------------------------------------------
※$products = Product::where('category_id', $request->category)->paginate(15);を実行して、
受け取った絞り込みたいカテゴリーのIDを持つ商品データを取得しています。
またpaginate(15)も実行しているので、ページネーションにも対応しています。


--------------------------------------------------------------------------
◆14.3 ビューの修正
--------------------------------------------------------------------------
resources
　　L　views
　　　　　L　components
　　　　　　　　L　sidebar.blade.php
--------------------------------------------------------------------------
<label class="samuraimart-sidebar-category-label"><a href="{{ route('products.index', ['category' => $category->id]) }}">{{ $category->name }}</a></label>
--------------------------------------------------------------------------
※{{ route('products.index', ['category' => $category->id]) }}のように、
呼び出すルーティングの後に連想配列で変数を渡すことで、コントローラー側へ値を渡すことができます


--------------------------------------------------------------------------
◆どういうカテゴリの商品が表示されているかをわかるようにする
--------------------------------------------------------------------------
resources
　　L　views
　　　　　L　products
　　　　　　　　　L　index.blade.php
--------------------------------------------------------------------------

         <div class="container">
             @if ($category !== null)
                 <a href="{{ route('products.index') }}">トップ</a> > <a href="#">{{ $category->major_category_name }}</a> > {{ $category->name }}
                 <h1>{{ $category->name }}の商品一覧{{$total_count}}件</h1>
             @endif
         </div>



			{{ $products->appends(request()->query())->links() }}
--------------------------------------------------------------------------

※<h1>{{ $category->name }}の商品一覧{{$total_count}}件</h1>を追加して、絞り込んでいる
カテゴリー名を表示しています。また$total_countでは、カテゴリーで絞り込んだ商品の数を表示しています。

※また、カテゴリーで絞り込んだ条件を保持してページングするために、
{{ $products->appends(request()->query())->links() }}に変更しています。



--------------------------------------------------------------------------
◆15. ソート機能の追加
--------------------------------------------------------------------------

【ライブラリのインストール】
　　　kyslik
【コマンド】
composer require kyslik/column-sortable



--------------------------------------------------------------------------
◆15.1 モデルの修正
--------------------------------------------------------------------------
app
　L　Models
　　　　L　Product.php
--------------------------------------------------------------------------
【Kyslikを使用できるよう宣言】
use Kyslik\ColumnSortable\Sortable;

use HasFactory, Favoriteable, Sortable;


--------------------------------------------------------------------------
◆15.2 コントローラーの修正
--------------------------------------------------------------------------
app
　LHttp
　　L　Controllers
　　　　　　L　ProductController.php
--------------------------------------------------------------------------
//sortable()を使用することでソートが可能となる。
 $products = Product::where('category_id', $request->category)->sortable()->paginate(15);


--------------------------------------------------------------------------
◆15.3 ビューの修正
--------------------------------------------------------------------------
resources
　　L　views
　　　　　L　products
　　　　　　　　　L　index.blade.php
--------------------------------------------------------------------------
		<div>
             Sort By
             @sortablelink('id', 'ID')
             @sortablelink('price', 'Price')
         </div>
--------------------------------------------------------------------------
※@sortablelinkはソートするためのリンクを追加する関数です。第1引数にソートするカラム名、
第2引数にビューに表示する文字列を指定します。
--------------------------------------------------------------------------
--------------------------------------------------------------------------


--------------------------------------------------------------------------
◆16. ユーザー情報を編集できるようにする
--------------------------------------------------------------------------

---------------------------------------------------------------------------
●16.1 Userモデルにカラムを追加しよう
---------------------------------------------------------------------------
【コマンド】
php artisan make:migration add_columns_to_users
---------------------------------------------------------------------------
database
　　L　migrations
　　　　　　L　XXXX_XX_XX_XXXXXX_add_columns_to_users.php
---------------------------------------------------------------------------
			$table->string('postal_code')->default('');
             $table->text('address');
             $table->string('phone')->default('');
---------------------------------------------------------------------------

【コマンド】※実行して反映
php artisan migrate
---------------------------------------------------------------------------
---------------------------------------------------------------------------
★新規アカウントの作成時に、同様に住所などを保存できるようにします
---------------------------------------------------------------------------
app
　L Http
　　　L　Controllers
　　　　　　　　L　Auth
　　　　　　　　　　L　RegisterController.php
---------------------------------------------------------------------------
	protected function validator(array $data)
    {
            'postal_code' => ['required', 'string'],
             'address' => ['required', 'string'],
             'phone' => ['required', 'string'],
			----------------------------------------

 protected function create(array $data)
    {

	         'postal_code' => $data['postal_code'],
             'address' => $data['address'],
             'phone' => $data['phone'],
			----------------------------------------
---------------------------------------------------------------------------


--------------------------------------------------------------------------
◆16.2 アカウント作成時に住所等を保存できるようにする
--------------------------------------------------------------------------
app
　L Models
　　　L　User.php
--------------------------------------------------------------------------　　　
     	'name',
        'email',
        'password',
        'postal_code',
        'address',
        'phone'

--------------------------------------------------------------------------　
◆16.3 コントローラーを作成しよう
--------------------------------------------------------------------------　
【コマンド】
php artisan make:controller UserController --model=User

app
　L　Http
　　　L　Controllers
　　　　　　　L　UserController.php
--------------------------------------------------------------------------　　　　　　
　　※※※index、create、store、show、destroyを削除する
--------------------------------------------------------------------------

※今回は、ユーザーのマイページとユーザー情報を編集するページの作成、そして編集
ページからデータを受け取り、データベースに保存されている値を更新する処理が必要
になります。そのため、indexアクションなどの不要なアクションを削除しています。
--------------------------------------------------------------------------
use Illuminate\Support\Facades\Auth;

	public function mypage()//マイページ関数を作成
     {
         $user = Auth::user();
 
         return view('users.mypage', compact('user'));
     }
--------------------------------------------------------------------------
--------------------------------------------------------------------------
◆次にeditアクションを修正
--------------------------------------------------------------------------
public function edit(User $user)
    {
         //
         $user = Auth::user();
 
         return view('users.edit', compact('user'));
    }
--------------------------------------------------------------------------
--------------------------------------------------------------------------
◆次にupdateアクションを修正
--------------------------------------------------------------------------
	public function update(Request $request, User $user)
    {
         //
         $user = Auth::user();
 
         $user->name = $request->input('name') ? $request->input('name') : $user->name;
         $user->email = $request->input('email') ? $request->input('email') : $user->email;
         $user->postal_code = $request->input('postal_code') ? $request->input('postal_code') : $user->postal_code;
         $user->address = $request->input('address') ? $request->input('address') : $user->address;
         $user->phone = $request->input('phone') ? $request->input('phone') : $user->phone;
         $user->update();
 
         return to_route('mypage');
    }

※三項演算子は？が真である場合左　偽である場合右


--------------------------------------------------------------------------　
◆16.4 ルーティングを追加しよう
--------------------------------------------------------------------------　
routes
　L　web.php
--------------------------------------------------------------------------　
 use App\Http\Controllers\UserController;

Route::controller(UserController::class)->group(function () {
     Route::get('users/mypage', 'mypage')->name('mypage');
     Route::get('users/mypage/edit', 'edit')->name('mypage.edit');
     Route::put('users/mypage', 'update')->name('mypage.update');
 });

--------------------------------------------------------------------------


--------------------------------------------------------------------------　
16.5 ビューを作成しよう
--------------------------------------------------------------------------　
resources
　　L　views
　　　　　L　users
　　　　　　　　L　mypage.blade.php
--------------------------------------------------------------------------
@extends('layouts.app')
 
 @section('content')
 <div class="container d-flex justify-content-center mt-3">
     <div class="w-50">
         <h1>マイページ</h1>
 
         <hr>
 
         <div class="container">
             <div class="d-flex justify-content-between">
                 <div class="row">
                     <div class="col-2 d-flex align-items-center">
                         <i class="fas fa-user fa-3x"></i>
                     </div>
                     <div class="col-9 d-flex align-items-center ms-2 mt-3">
                         <div class="d-flex flex-column">
                             <label for="user-name">会員情報の編集</label>
                             <p>アカウント情報の編集</p>
                         </div>
                     </div>
                 </div>
                 <div class="d-flex align-items-center">
                     <a href="{{route('mypage.edit')}}">
                         <i class="fas fa-chevron-right fa-2x"></i>
                     </a>
                 </div>
             </div>
         </div>
 
         <hr>
 
         <div class="container">
             <div class="d-flex justify-content-between">
                 <div class="row">
                     <div class="col-2 d-flex align-items-center">
                         <i class="fas fa-archive fa-3x"></i>
                     </div>
                     <div class="col-9 d-flex align-items-center ms-2 mt-3">
                         <div class="d-flex flex-column">
                             <label for="user-name">注文履歴</label>
                             <p>注文履歴を確認できます</p>
                         </div>
                     </div>
                 </div>
                 <div class="d-flex align-items-center">
                     <a href="{{route('mypage')}}">
                         <i class="fas fa-chevron-right fa-2x"></i>
                     </a>
                 </div>
             </div>
         </div>
 
         <hr>
 
         <div class="container">
             <div class="d-flex justify-content-between">
                 <div class="row">
                     <div class="col-2 d-flex align-items-center">
                         <i class="fas fa-sign-out-alt fa-3x"></i>
                     </div>
                     <div class="col-9 d-flex align-items-center ms-2 mt-3">
                         <div class="d-flex flex-column">
                             <label for="user-name">ログアウト</label>
                             <p>ログアウトします</p>
                         </div>
                     </div>
                 </div>
                 <div class="d-flex align-items-center">
                     <a href="{{ route('logout') }}" onclick="event.preventDefault(); document.getElementById('logout-form').submit();">
                         <i class="fas fa-chevron-right fa-2x"></i>
                     </a>
 
                     <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
                         @csrf
                     </form>
                 </div>
             </div>
         </div>
 
         <hr>
     </div>
 </div>
 @endsection

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------
◆次に、ユーザー情報の編集画面を作成します。
--------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　users
　　　　　　　　L　edit.blade.php
--------------------------------------------------------------------------
@extends('layouts.app')
 
 @section('content')
 <div class="container">
     <div class="row justify-content-center">
         <div class="col-md-5">
             <span>
                 <a href="{{ route('mypage') }}">マイページ</a> > 会員情報の編集
             </span>
 
             <h1 class="mt-3 mb-3">会員情報の編集</h1>
             <hr>
 
             <form method="POST" action="{{ route('mypage') }}">
                 @csrf
                 <input type="hidden" name="_method" value="PUT">
                 <div class="form-group">
                     <div class="d-flex justify-content-between">
                         <label for="name" class="text-md-left samuraimart-edit-user-info-label">氏名</label>
                     </div>
                     <div class="collapse show editUserName">
                         <input id="name" type="text" class="form-control @error('name') is-invalid @enderror" name="name" value="{{ $user->name }}" required autocomplete="name" autofocus placeholder="侍 太郎">
                         @error('name')
                         <span class="invalid-feedback" role="alert">
                             <strong>氏名を入力してください</strong>
                         </span>
                         @enderror
                     </div>
                 </div>
                 <br>
 
                 <div class="form-group">
                     <div class="d-flex justify-content-between">
                         <label for="email" class="text-md-left samuraimart-edit-user-info-label">メールアドレス</label>
                     </div>
                     <div class="collapse show editUserMail">
                         <input id="email" type="text" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ $user->email }}" required autocomplete="email" autofocus placeholder="samurai@samurai.com">
                         @error('email')
                         <span class="invalid-feedback" role="alert">
                             <strong>メールアドレスを入力してください</strong>
                         </span>
                         @enderror
                     </div>
                 </div>
                 <br>
 
                 <div class="form-group">
                     <div class="d-flex justify-content-between">
                         <label for="postal_code" class="text-md-left samuraimart-edit-user-info-label">郵便番号</label>
                     </div>
                     <div class="collapse show editUserPhone">
                         <input id="postal_code" type="text" class="form-control @error('postal_code') is-invalid @enderror" name="postal_code" value="{{ $user->postal_code }}" required autocomplete="postal_code" autofocus placeholder="XXX-XXXX">
                         @error('postal_code')
                         <span class="invalid-feedback" role="alert">
                             <strong>郵便番号を入力してください</strong>
                         </span>
                         @enderror
                     </div>
                 </div>
                 <br>
 
                 <div class="form-group">
                     <div class="d-flex justify-content-between">
                         <label for="address" class="text-md-left samuraimart-edit-user-info-label">住所</label>
                     </div>
                     <div class="collapse show editUserPhone">
                         <input id="address" type="text" class="form-control @error('address') is-invalid @enderror" name="address" value="{{ $user->address }}" required autocomplete="address" autofocus placeholder="東京都渋谷区道玄坂X-X-X">
                         @error('address')
                         <span class="invalid-feedback" role="alert">
                             <strong>住所を入力してください</strong>
                         </span>
                         @enderror
                     </div>
                 </div>
                 <br>
 
                 <div class="form-group">
                     <div class="d-flex justify-content-between">
                         <label for="phone" class="text-md-left samuraimart-edit-user-info-label">電話番号</label>
                     </div>
                     <div class="collapse show editUserPhone">
                         <input id="phone" type="text" class="form-control @error('phone') is-invalid @enderror" name="phone" value="{{ $user->phone }}" required autocomplete="phone" autofocus placeholder="XXX-XXXX-XXXX">
                         @error('phone')
                         <span class="invalid-feedback" role="alert">
                             <strong>電話番号を入力してください</strong>
                         </span>
                         @enderror
                     </div>
                 </div>
 
                 <hr>
                 <button type="submit" class="btn samuraimart-submit-button mt-3 w-25">
                     保存
                 </button>
             </form>
         </div>
     </div>
 </div>
 @endsection
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------
◆16.6 ヘッダーにマイページへのリンクを追加しよう
--------------------------------------------------------------------------

resources
　　　L　views
　　　　　　L　components
　　　　　　　　　　L　header.blade.php
--------------------------------------------------------------------------

         <li class="nav-item mr-5">
           <a class="nav-link" href="{{ route('mypage') }}">
             <i class="fas fa-user mr-1"></i><label>マイページ</label>
           </a>
         </li>

--------------------------------------------------------------------------


--------------------------------------------------------------------------
◆17. パスワード変更機能を追加しよう
--------------------------------------------------------------------------
app
　L　Http
　　　L　Controllers
　　　　　　　　L　UserController.php
--------------------------------------------------------------------------
◆コントローラーを修正
--------------------------------------------------------------------------
public function update_password(Request $request)
     {
         $user = Auth::user();
 
         if ($request->input('password') == $request->input('password_confirmation')) {
             $user->password = bcrypt($request->input('password'));
             $user->update();
         } else {
             return to_route('mypage.edit_password');
         }
 
         return to_route('mypage');
     }
--------------------------------------------------------------------------

◆パスワード変更画面を表示するedit_passwordアクションを作成します。
--------------------------------------------------------------------------
app
　L　Http
　　　　L　Controllers
　　　　　　　　　L　UserController.php
--------------------------------------------------------------------------
	public function edit_password()
     {
         return view('users.edit_password');
     }
--------------------------------------------------------------------------

--------------------------------------------------------------------------
◆ルーティングの設定
--------------------------------------------------------------------------
routes
　L　web.php
--------------------------------------------------------------------------
  	 Route::get('users/mypage/password/edit', 'edit_password')->name('mypage.edit_password');
     Route::put('users/mypage/password', 'update_password')->name('mypage.update_password'); 
--------------------------------------------------------------------------

--------------------------------------------------------------------------
◆ビューの作成
--------------------------------------------------------------------------
resources
　　L　views
　　　　　L　users
　　　　　　　　L　edit_password.blade.php
--------------------------------------------------------------------------
@extends('layouts.app')
 
 @section('content')
 <div class="container">
     <form method="post" action="{{route('mypage.update_password')}}">
         {{csrf_field()}}
         <input type="hidden" name="_method" value="PUT">
         <div class="form-group row mb-3">
             <label for="password" class="col-md-3 col-form-label text-md-right">新しいパスワード</label>
 
             <div class="col-md-7">
                 <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="new-password">
 
                 @error('password')
                 <span class="invalid-feedback" role="alert">
                     <strong>{{ $message }}</strong>
                 </span>
                 @enderror
             </div>
         </div>
 
         <div class="form-group row mb-3">
             <label for="password-confirm" class="col-md-3 col-form-label text-md-right">確認用</label>
 
             <div class="col-md-7">
                 <input id="password-confirm" type="password" class="form-control" name="password_confirmation" required autocomplete="new-password">
             </div>
         </div>
 
         <div class="form-group d-flex justify-content-center">
             <button type="submit" class="btn btn-danger w-25">
                 パスワード更新
             </button>
         </div>
     </form>
 </div>
 @endsection
----------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------
◆マイページにパスワードのリセット画面へのリンクを追加しましょう。
----------------------------------------------------------------------------------------------------------------------------------------------------
resources
　　L　views
　　　　　L　users
　　　　　　　　L　mypage.blade.php
----------------------------------------------------------------------------------------------------------------------------------------------------
 		<div class="container">
             <div class="d-flex justify-content-between">
                 <div class="row">
                     <div class="col-2 d-flex align-items-center">
                         <i class="fas fa-lock fa-3x"></i>
                     </div>
                     <div class="col-9 d-flex align-items-center ms-2 mt-3">
                         <div class="d-flex flex-column">
                             <label for="user-name">パスワード変更</label>
                             <p>パスワードを変更します</p>
                         </div>
                     </div>
                 </div>
                 <div class="d-flex align-items-center">
                     <a href="{{ route('mypage.edit_password') }}">
                         <i class="fas fa-chevron-right fa-2x"></i>
                     </a>
                 </div>
             </div>
         </div>
 
         <hr>
----------------------------------------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------
◆18. お気に入りした商品を表示する
--------------------------------------------------------------------------
◆コントローラーの修正

app
　L　Http
　　　L　Controllers
　　　　　　　L　UserController.php
--------------------------------------------------------------------------
	public function favorite()
     {
         $user = Auth::user();
 
         $favorites = $user->favorites(Product::class)->get();
 
         return view('users.favorite', compact('favorites'));
     }
--------------------------------------------------------------------------
--------------------------------------------------------------------------
◆18.2 ルーティングを追加しよう
--------------------------------------------------------------------------
route
　L　web.php
--------------------------------------------------------------------------
　 Route::get('users/mypage/favorite', 'favorite')->name('mypage.favorite');
--------------------------------------------------------------------------

--------------------------------------------------------------------------
◆18.3 ビューを作成しよう
--------------------------------------------------------------------------
resources
　　L　views
　　　　　L　users
　　　　　　　　L　favorite.blade.php
--------------------------------------------------------------------------
@extends('layouts.app')
 
 @section('content')
 <div class="container  d-flex justify-content-center mt-3">
     <div class="w-75">
         <h1>お気に入り</h1>
 
         <hr>
 
         <div class="row">
             @foreach ($favorites as $fav)
             <div class="col-md-7 mt-2">
                 <div class="d-inline-flex">
                     <a href="{{route('products.show', $fav->favoriteable_id)}}" class="w-25">
                         <img src="{{ asset('img/dummy.png')}}" class="img-fluid w-100">
                     </a>
                     <div class="container mt-3">
                         <h5 class="w-100 samuraimart-favorite-item-text">{{App\Models\Product::find($fav->favoriteable_id)->name}}</h5>
                         <h6 class="w-100 samuraimart-favorite-item-text">&yen;{{App\Models\Product::find($fav->favoriteable_id)->price}}</h6>
                     </div>
                 </div>
             </div>
             <div class="col-md-2 d-flex align-items-center justify-content-end">
                 <a href="{{ route('products.favorite', $fav->favoriteable_id) }}" class="samuraimart-favorite-item-delete">
                     削除
                 </a>
             </div>
             <div class="col-md-3 d-flex align-items-center justify-content-end">
                 <button type="submit" class="btn samuraimart-favorite-add-cart">カートに入れる</button>
             </div>
             @endforeach
         </div>
 
         <hr>
     </div>
 </div>
 @endsection
--------------------------------------------------------------------------
--------------------------------------------------------------------------
◆CSSを追加
--------------------------------------------------------------------------
public
　L　css
　　　L　samuraimart.css
--------------------------------------------------------------------------
 .samuraimart-favorite-add-cart {
     border-radius: 2px;
     color: #ffffff;
     background-color: #0fbe9f;
 }
--------------------------------------------------------------------------

◆ヘッダーにお気に入りページへのリンクを追加します。
--------------------------------------------------------------------------
resouces
　　L　views
　　　　　L　components
　　　　　　　　　L　header.blade.php
--------------------------------------------------------------------------
        <li class="nav-item mr-5">
           <a class="nav-link" href="{{ route('mypage.favorite') }}">
             <i class="far fa-heart"></i>
           </a>
         </li>
--------------------------------------------------------------------------
--------------------------------------------------------------------------
◆19章 ショッピングカート機能を追加しよう
--------------------------------------------------------------------------
◆ライブラリのインストール
--------------------------------------------------------------------------
【コマンド】
composer require bumbummen99/shoppingcart
--------------------------------------------------------------------------
◆shoppingcartライブラリの設定ファイルをコピーします。
【コマンド】
php artisan vendor:publish --provider="Gloudemans\Shoppingcart\ShoppingcartServiceProvider" --tag="config"
--------------------------------------------------------------------------
config
　　L　cart.php
--------------------------------------------------------------------------
◆maigrationもコピーする
--------------------------------------------------------------------------
【コマンド】
php artisan vendor:publish --provider="Gloudemans\Shoppingcart\ShoppingcartServiceProvider" --tag="migrations"
--------------------------------------------------------------------------
database
　　L　migrations
　　　　　L　2018_12_23_120000_create_shoppingcart_table.php
--------------------------------------------------------------------------
$table->integer('number')->nullable();
--------------------------------------------------------------------------
【マイグレーションを実行して反映】
【コマンド】
php artisan migrate

--------------------------------------------------------------------------
--------------------------------------------------------------------------
◆19.2 コントローラーを作成しよう
--------------------------------------------------------------------------
【コマンド】
php artisan make:controller CartController --resource
--------------------------------------------------------------------------
app
　L Http
　　　L　Controllers
　　　　　　　　L　CartController.php
--------------------------------------------------------------------------
◆不要なアクション（create・show・edit・updateアクション）を削除します。

--------------------------------------------------------------------------
◆19.3 コントローラー　indexアクションを修正
--------------------------------------------------------------------------
app
　L　Http
　　　L　Controllers
　　　　　　　　L　CartController.php
--------------------------------------------------------------------------
 use Gloudemans\Shoppingcart\Facades\Cart;
 use Illuminate\Support\Facades\Auth;
	public function index()
    {
		$cart = Cart::instance(Auth::user()->id)->content();
 
         $total = 0;
 
         foreach ($cart as $c) {
             $total += $c->qty * $c->price;
         }
 
         return view('carts.index', compact('cart', 'total'));
	｝
--------------------------------------------------------------------------
★　$cart = Cart::instance(Auth::user()->id)->content();
ユーザーのIDを元にこれまで追加したカートの中身を$cart変数に保存します。
--------------------------------------------------------------------------

---------------------------------------------------------------------------
◆storeアクションの追加
---------------------------------------------------------------------------

  public function store(Request $request)
    {
         //
         Cart::instance(Auth::user()->id)->add(
             [
                 'id' => $request->id, 
                 'name' => $request->name, 
                 'qty' => $request->qty, 
                 'price' => $request->price, 
                 'weight' => $request->weight, 
             ] 
         );
 
         return to_route('products.show', $request->get('id'));
    }

---------------------------------------------------------------------------
---------------------------------------------------------------------------
◆destroyアクションの追加
---------------------------------------------------------------------------
★購入済みかどうかを判定する為のカラムをshoppingcartに追加
---------------------------------------------------------------------------
【コマンド】
php artisan make:migration add_buy_flag_to_shoppingcart
---------------------------------------------------------------------------
database
　　L　migrations
　　　　　　L　XXXX_XX_XX_XXXXXX_add_buy_flag_to_shoppingcart.php
---------------------------------------------------------------------------
	public function up()
    {
        Schema::table('shoppingcart', function (Blueprint $table) {
             //
             $table->boolean('buy_flag')->default(false);
        });
    }

---------------------------------------------------------------------------
【マイグレーションを行う】
【コマンド】
php artisan migrate
---------------------------------------------------------------------------

---------------------------------------------------------------------------
◆destrOyアクションの追加
---------------------------------------------------------------------------
app
 L
  Http
    L Controllers
            L CartController.php
---------------------------------------------------------------------------

 use Illuminate\Support\Facades\DB;
public function destroy(Request $request)
     {
         //
         $user_shoppingcarts = DB::table('shoppingcart')->where('instance', Auth::user()->id)->get();
         $count = $user_shoppingcarts->count();
 
         $count += 1;
         Cart::instance(Auth::user()->id)->store($count);
 
         DB::table('shoppingcart')->where('instance', Auth::user()->id)->where('number', null)->update(['number' => $count, 'buy_flag' => true]);
 		//---------------------------------------------------------------------------
 		//【●】↑【●】DB::table('shoppingcart')では、データベース内のshoppingcartテーブルへのアクセスを行っています。その後where()を使って
 		//ユーザーのIDとカート数$countを使い、先ほど作成したカートのデータを更新しています。
        //---------------------------------------------------------------------------
         Cart::instance(Auth::user()->id)->destroy();//ユーザーのIDを使ってカート内の商品情報などをデータベースへと保存しています。
 
         return to_route('carts.index');
    }
---------------------------------------------------------------------------
★$count = $user_shoppingcarts->count();では、現在までのユーザーが注文したカートの数を取得しています。

★$count += 1;では、新しくデータベースに登録するカートのデータ用にカートのIDを一つ増やしています。
---------------------------------------------------------------------------

---------------------------------------------------------------------------
◆ショッピングカートの中身を確認できるようにする
---------------------------------------------------------------------------
◆ビューを追加
---------------------------------------------------------------------------
resources
　　L　views
　　　　　L　carts
　　　　　　　　L　index.blade.php
---------------------------------------------------------------------------


@section('content')
 <div class="container d-flex justify-content-center mt-3">
     <div class="w-75">
         <h1>ショッピングカート</h1>
 
         <div class="row">
             <div class="offset-8 col-4">
                 <div class="row">
                     <div class="col-6">
                         <h2>数量</h2>
                     </div>
                     <div class="col-6">
                         <h2>合計</h2>
                     </div>
                 </div>
             </div>
         </div>
 
         <hr>
 
         <div class="row">
             @foreach ($cart as $product)
             <div class="col-md-2 mt-2">
                 <a href="{{route('products.show', $product->id)}}">
                     <img src="{{ asset('img/dummy.png')}}" class="img-fluid w-100">
                 </a>
             </div>
             <div class="col-md-6 mt-4">
                 <h3 class="mt-4">{{$product->name}}</h3>
             </div>
             <div class="col-md-2">
                 <h3 class="w-100 mt-4">{{$product->qty}}</h3>
             </div>
             <div class="col-md-2">
                 <h3 class="w-100 mt-4">￥{{$product->qty * $product->price}}</h3>
             </div>
             @endforeach
         </div>
 
         <hr>
 
         <div class="offset-8 col-4">
             <div class="row">
                 <div class="col-6">
                     <h2>合計</h2>
                 </div>
                 <div class="col-6">
                     <h2>￥{{$total}}</h2>
                 </div>
                 <div class="col-12 d-flex justify-content-end">
                     表示価格は税込みです
                 </div>
             </div>
         </div>
     </div>
 </div>
 @endsection
------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
◆ルーティングの追加
---------------------------------------------------------------------------------------------------------
routes
　　L web.php
---------------------------------------------------------------------------------------------------------
use App\Http\Controllers\CartController;

Route::controller(CartController::class)->group(function () {
     Route::get('users/carts', 'index')->name('carts.index');
 });
---------------------------------------------------------------------------------------------------------
※Route::get('users/carts', 'index')->name('carts.index');を追加し、
カートの中身を確認するページへのURLを設定し、CartControllerでグルーピングしています。
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
◆20.2　カートに商品を追加
---------------------------------------------------------------------------------------------------------
resources
　　L　views
　　　　　L　products
　　　　　　　　L　show.blade.php
---------------------------------------------------------------------------------------------------------
<form method="POST" action="{{route('carts.store')}}" class="m-3 align-items-end">

---------------------------------------------------------------------------------------------------------
◆お気に入り画面から商品を追加できるようにしましょう。
---------------------------------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　users
　　　　　　　　L　favorite.blade.php
---------------------------------------------------------------------------------------------------------
                <form method="POST" action="{{route('carts.store')}}" class="m-3 align-items-end">
                     @csrf
                     <input type="hidden" name="id" value="{{App\Models\Product::find($fav->favoriteable_id)->id}}">
                     <input type="hidden" name="name" value="{{App\Models\Product::find($fav->favoriteable_id)->name}}">
                     <input type="hidden" name="price" value="{{App\Models\Product::find($fav->favoriteable_id)->price}}">
                     <input type="hidden" name="qty" value="1">
                     <input type="hidden" name="weight" value="0">
                     <button type="submit" class="btn samuraimart-favorite-add-cart">カートに入れる</button>
                 </form>
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
◆ルーティングの設定
---------------------------------------------------------------------------------------------------------
routes
　　L　web.php
---------------------------------------------------------------------------------------------------------
Route::post('users/carts', 'store')->name('carts.store');
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
◆20.3 ヘッダーにカートへのリンクを追加しよう
---------------------------------------------------------------------------------------------------------
resources
　　　L　views
　　　　　　L　components
　　　　　　　　　　L　header.blade.php
---------------------------------------------------------------------------------------------------------
        <li class="nav-item mr-5">
           <a class="nav-link" href="{{ route('carts.index') }}">
             <i class="fas fa-shopping-cart"></i>
           </a>
         </li>
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
◆20.4 購入できるようにしよう
---------------------------------------------------------------------------------------------------------
resources
　　L　views
　　　　L carts
　　　　　　L　index.blade.php
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
◆21.1 コントローラーを作成しよう
---------------------------------------------------------------------------------------------------------
◆【コマンド】
php artisan make:controller WebController
---------------------------------------------------------------------------------------------------------

app
　L　Http
　　　L　Controllers
　　　　　　　L　WebController.php
　　　　　　　
---------------------------------------------------------------------------------------------------------
use App\Models\Category;

public function index()
    {
        $categories = Category::all()->sortBy('major_category_name');

        $major_category_names = Category::pluck('major_category_name')->unique();

        return view('web.index', compact('major_category_names', 'categories'));
    }
---------------------------------------------------------------------------------------------------------

◆ルーティングの設定
---------------------------------------------------------------------------------------------------------
routes
　L　web.php
---------------------------------------------------------------------------------------------------------
 use App\Http\Controllers\WebController;
 
  Route::get('/',  [WebController::class, 'index']);
---------------------------------------------------------------------------------------------------------
◆ビューの作成
---------------------------------------------------------------------------------------------------------
resources
　　L　views
　　　　L　web
　　　　　　L　index.blade.php
---------------------------------------------------------------------------------------------------------
 @extends('layouts.app')
 
 @section('content')
 <div class="row">
     <div class="col-2">
         @component('components.sidebar', ['categories' => $categories, 'major_category_names' => $major_category_names])
         @endcomponent
     </div>
     <div class="col-9">
         <h1>おすすめ商品</h1>
         <div class="row">
             <div class="col-4">
                 <a href="#">
                     <img src="{{ asset('img/chestnut.jpg') }}" class="img-thumbnail">
                 </a>
                 <div class="row">
                     <div class="col-12">
                         <p class="samuraimart-product-label mt-2">
                             和栗の詰め合わせ<br>
                             <label>￥2000</label>
                         </p>
                     </div>
                 </div>
             </div>
             <div class="col-4">
                 <a href="#">
                     <img src="{{ asset('img/persimmon.jpg') }}" class="img-thumbnail">
                 </a>
                 <div class="row">
                     <div class="col-12">
                         <p class="samuraimart-product-label mt-2">
                             おいしい柿<br>
                             <label>￥500</label>
                         </p>
                     </div>
                 </div>
             </div>
 
             <div class="col-4">
                 <a href="#">
                     <img src="{{ asset('img/orange.jpg') }}" class="img-thumbnail">
                 </a>
                 <div class="row">
                     <div class="col-12">
                         <p class="samuraimart-product-label mt-2">
                             旬なみかん<br>
                             <label>￥1200</label>
                         </p>
                     </div>
                 </div>
             </div>
 
         </div>
 
         <h1>新着商品</h1>
         <div class="row">
             <div class="col-3">
                 <a href="#">
                     <img src="{{ asset('img/robot-vacuum-cleaner.jpg') }}" class="img-thumbnail">
                 </a>
                 <div class="row">
                     <div class="col-12">
                         <p class="samuraimart-product-label mt-2">
                             ロボット掃除機<br>
                             <label>￥55000</label>
                         </p>
                     </div>
                 </div>
             </div>
 
             <div class="col-3">
                 <a href="#">
                     <img src="{{ asset('img/sofa.jpg') }}" class="img-thumbnail">
                 </a>
                 <div class="row">
                     <div class="col-12">
                         <p class="samuraimart-product-label mt-2">
                             3人掛けソファー<br>
                             <label>￥35000</label>
                         </p>
                     </div>
                 </div>
             </div>
 
             <div class="col-3">
                 <a href="#">
                     <img src="{{ asset('img/cup.jpg') }}" class="img-thumbnail">
                 </a>
                 <div class="row">
                     <div class="col-12">
                         <p class="samuraimart-product-label mt-2">
                             コーヒーカップ<br>
                             <label>￥1000</labiel>
                         </p>
                     </div>
                 </div>
             </div>
 
             <div class="col-3">
                 <a href="#">
                     <img src="{{ asset('img/cutlery.jpg') }}" class="img-thumbnail">
                 </a>
                 <div class="row">
                     <div class="col-12">
                         <p class="samuraimart-product-label mt-2">
                             食器 カトラリーセット1組<br>
                             <label>￥2000</label>
                         </p>
                     </div>
                 </div>
             </div>
         </div>
     </div>
 </div>
 @endsection
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
●22.1 レビューに評価機能を追加
---------------------------------------------------------------------------------------------------------
◆1.1 テーブルにカラムを追加しよう
---------------------------------------------------------------------------------------------------------

【コマンド】
php artisan make:migration add_score_to_reviews

database
　　L　migrations
　　　　　　L XXXX_XX_XX_XXXXXXXX_add_score_to_reviews.php
---------------------------------------------------------------------------------------------------------
	public function up()
    {
        Schema::table('reviews', function (Blueprint $table) {
        $table->integer('score')->unsigned()->default(0);
        });
    }
---------------------------------------------------------------------------------------------------------
【コマンド】
php artisan migrate
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
◆コントローラーを修正しよう
---------------------------------------------------------------------------------------------------------
app
　L Http
　　　L　Controllers
　　　　　　　L　ReviewController.php
---------------------------------------------------------------------------------------------------------
public function store(Request $request)
    {
         //
         $request->validate([
             'content' => 'required'
         ]);
 
         $review = new Review();
         $review->content = $request->input('content');
         $review->product_id = $request->input('product_id');
         $review->user_id = Auth::user()->id;
         $review->score = $request->input('score');//★　※※※　ここを追加　※※※
         $review->save();
 
         return back();
    }
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
◆1.2 ビューを修正しよう
---------------------------------------------------------------------------------------------------------
resources
　　L　views
　　　　　L products
　　　　　　　　L　show.blade.php
---------------------------------------------------------------------------------------------------------
						<h3 class="review-score-color">{{ str_repeat('★', $review->score) }}</h3>

                         
                         
                         <h4>評価</h4>
                         <select name="score" class="form-control m-2 review-score-color">
                             <option value="5" class="review-score-color">★★★★★</option>
                             <option value="4" class="review-score-color">★★★★</option>
                             <option value="3" class="review-score-color">★★★</option>
                             <option value="2" class="review-score-color">★★</option>
                             <option value="1" class="review-score-color">★</option>
                         </select>
※レビューを作成するformタグの中にselectタグを追加して、評価を選べるようにしています。
※また、選んだ評価（★の数）を、数値としてコントローラに送信します。

---------------------------------------------------------------------------------------------------------
◆1.3 CSSを修正しよう
---------------------------------------------------------------------------------------------------------
public
　　L　css
　　　　L　samuraimart.css
---------------------------------------------------------------------------------------------------------
.review-score-color {
    color: #0fbe9f;
}

.review-score-color:focus {
    color: #0fbe9f;
}
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
◆2章 購入時の確認画面を実装しよう
---------------------------------------------------------------------------------------------------------
◆2.1 購入時の確認画面を実装しよう
---------------------------------------------------------------------------------------------------------
resources
　　L　views
　　　　　L　carts
　　　　　　　　L　index.blade.php
---------------------------------------------------------------------------------------------------------
<div class="btn samuraimart-submit-button" data-bs-toggle="modal" data-bs-target="#buy-confirm-modal">購入を確定する</div>

<div class="btn samuraimart-submit-button disabled" data-bs-toggle="modal" data-bs-target="#buy-confirm-modal">購入を確定する</div>

             <div class="modal fade" id="buy-confirm-modal" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                 <div class="modal-dialog">
                     <div class="modal-content">
                         <div class="modal-header">
                             <h5 class="modal-title" id="staticBackdropLabel">購入を確定しますか？</h5>
                             <button type="button" class="close" data-bs-dismiss="modal" aria-label="閉じる">
                                 <span aria-hidden="true">&times;</span>
                             </button>
                         </div>
                         <div class="modal-footer">
                             <button type="button" class="btn samuraimart-favorite-button border-dark text-dark" data-bs-dismiss="modal">閉じる</button>
                             <button type="submit" class="btn samuraimart-submit-button">購入</button>
                         </div>
                     </div>
                 </div>
             </div>
---------------------------------------------------------------------------------------------------------
※モーダルウィンドウを使用することに加え、画面に表示するモーダルウィンドウのIDを指定しています。
※モーダルウィンドウとは、元の画面の上に表示される別画面でしたね。ユーザーが商品を購入するかキャンセルするまで元の画面に戻ることはできません。

※ここで指定されたIDを持つHTML要素を、モーダルウィンドウとして呼び出すことができます。
※また、以下は呼び出されるモーダルウィンドウのコードです。




---------------------------------------------------------------------------------------------------------
◆3章 管理画面を実装しよう #1
---------------------------------------------------------------------------------------------------------
3.1 ライブラリを導入しよう
【コマンド】
composer require encore/laravel-admin

※Configディレクトリやlangディレクトリ等をコピー
【コマンド】
php artisan vendor:publish --provider="Encore\Admin\AdminServiceProvider"

※インストールを完了する
【コマンド】
php artisan admin:install
---------------------------------------------------------------------------------------------------------
※※※初期ID・パスワード　
ID:admin 
pw:admin
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
3.2 カテゴリーの管理画面を作成しよう
---------------------------------------------------------------------------------------------------------
※CRUDの作成
---------------------------------------------------------------------------------------------------------
【コマンド】
php artisan admin:make CategoryController --model="App\Models\Category"
---------------------------------------------------------------------------------------------------------
app
　
　L Admin
　　　L　routes.php
---------------------------------------------------------------------------------------------------------
◆ルーティングの設定　これは管理画面用
---------------------------------------------------------------------------------------------------------
use Illuminate\Routing\Router;
 use App\Admin\Controllers\CategoryController;

Admin::routes();

Route::group([
    'prefix'        => config('admin.route.prefix'),
    'namespace'     => config('admin.route.namespace'),
    'middleware'    => config('admin.route.middleware'),
    'as'            => config('admin.route.prefix') . '.',
], function (Router $router) {

    $router->get('/', 'HomeController@index')->name('home');
     $router->resource('categories', CategoryController::class);

});
---------------------------------------------------------------------------------------------------------
※左のmenuボタンをクリックして、タイトル：カテゴリー　URL：categories
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
◆ソートできるようにしよう
---------------------------------------------------------------------------------------------------------
◆app
　L　Admin
　　　　L　Controllers
　　　　　　　　L　CategoryController.php
---------------------------------------------------------------------------------------------------------
	$grid->column('id', __('Id'))->sortable();
	$grid->column('created_at', __('Created at'))->sortable();
    $grid->column('updated_at', __('Updated at'))->sortable();
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
◆フィルタ機能を拡張しよう
---------------------------------------------------------------------------------------------------------
app
　L　Admin
　　　　L　Controllers
　　　　　　　　　L　CategoryController.php
---------------------------------------------------------------------------------------------------------
		$grid->filter(function($filter) {
        $filter->like('name', 'カテゴリー名');
        $filter->like('major_category_name', '親カテゴリー名');
        $filter->between('created_at', '登録日')->datetime();
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
●4章 管理画面を実装しよう #2
---------------------------------------------------------------------------------------------------------



























































