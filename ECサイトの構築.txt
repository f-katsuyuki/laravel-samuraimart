
--------------------------------------------
●要件定義書の作成
--------------------------------------------
【機能詳細】
・ログイン
・お気に入り
・商品のソート
・カート（ショッピングカート）

＜実装する為の使用ライブラリ＞
★Laravelで使用できるライブラリ

●laravel/ui　　ログイン機能を実装する為に用いる

●overtrue/laravel-favorite：　　フォローやお気に入り等のライブラリ

●bumbummen99/LaravelShoppingcart　　ショッピングカートを実装できる

----------------------------------------------------------------
※各バージョンの確認方法
・PHP　-V
・composer　-v
----------------------------------------------------------------

-------------------------------------------------------------------------------------------
●1.プロジェクトの作成********************************************************************
-------------------------------------------------------------------------------------------
・＜samuraimartプロジェクトを作成＞
【コマンド】
composer create-project "laravel/laravel=9.*" laravel-samuraimart

※プロジェクトを作成するときはパスに注意する。
PS C:\xampp\htdocs> 
★＜●●htdocs直下で行う●●＞

※※※＜phpのverが9.代であることも注意が必要＞

-------------------------------------------------------------------------------------------
●2.タイムゾーンの設定********************************************************************
-------------------------------------------------------------------------------------------
プロジェクト
　　　L　config
　　　　L　app.php
　　　　'timezone' => 'Asia/Tokyo',//ここを変更
　　　　

-------------------------------------------------------------------------------------------
●3.データベースの作成********************************************************************
-------------------------------------------------------------------------------------------

----------------------------------------------
・3.1　データベースの作成
----------------------------------------------
◆mysqlの【admin】ボタンをクリック。
◆新規作成をクリックして、DB名を入力し作成をクリック

----------------------------------------------
・3.2　envファイルにDBを設定
----------------------------------------------
◆ DB_DATABASE=laravel_samuraimart



----------------------------------------------
・3.3　モデルとマイグレーションを行いDBと接続
----------------------------------------------
【コマンド】
php artisan make:model Category -m
---------------------------------------------------------
app
　L　Models
　　　　L　Category.php　が作成される。
---------------------------------------------------------　　　　
【-m】オプションをつけたのでmigragionフォルダに　　　　
database　　　　
　　L　migration
　　　　　　L　2023_02_20_193432_create_categories_table.phpファイルも作成されている
　　　　　　　　


----------------------------------------------
・3.4　マイグレーションファイルを編集してフィールド定義
----------------------------------------------
database　　　　
　　L　migration
　　　　　　L　2023_02_20_193432_create_categories_table.php
function　UP　
{
			$table->string('name');
            $table->text('description');
            $table->string('major_category_name');
｝　　　　
※上記３つを追加。フィールド定義

定義を反映させるには必ずmigrateを行う
【コマンド】
php artisan migrate

----------------------------------------------
・3.5　カテゴリを追加　＜★ライブラリ＞
----------------------------------------------
【コマンド実行】
php artisan tinker
※コードを気軽に試せるのがTinkerのメリット

【コマンド】
 Category::all()
 これを打ち込んでそのあとに内部の実装をここで行える。
 
  Category::all()
　
　//Categoryモデルを用いて新しい$category変数を作成
　$category = new Category()

//親カテゴリの名前と説明文を追加　　　　　　
　$category->major_category_name="Food"//----------------------------------------
　
　//カテゴリの名前を追加するコードを記述
　$category->name="meat"//-------------------------------------------------------
　
　//カテゴリの説明文を追記するコード
　$category->description = "description for meat."//-------------------------------
　　　　　
　
　$categoryに保存されているデータをデータベースに保存。
　$category->save()　　　　　

  //作成した＜モデル＞Categoryに設定した内容を確認
　　Category::all()

	//tinkerを終了する
	【コマンド】
	　exit　　　　　　＜モデル名::all()　～　　exit＞

-------------------------------------------------------------------------------------------
●4.カテゴリのシーダーを作る********************************************************************
-------------------------------------------------------------------------------------------
database
    L seeders
         L CategoriesTableSeeder.php
         
※※シーダーとはダミーのデータや必要になる基礎データなどをまとめて作成することができる仕組み
【コマンド】
php artisan make:seeder CategoriesTableSeeder

CategoriesTableSeeder.phpに下記を宣言して内容を記載していく。
★use App\Models\Category;

public function run()
{
	 	//各配列変数の大カテゴリを作成
	 	$major_category_names = [
             '本', 'コンピュータ', 'ディスプレイ'
         ];
 		
 		//小カテゴリを配列変数へ格納
         $book_categories = [
             'ビジネス', '文学・評論', '人文・思想', 'スポーツ',
             'コンピュータ・IT', '資格・検定・就職', '絵本・児童書', '写真集',
             'ゲーム攻略本', '雑誌', 'アート・デザイン', 'ノンフィクション'
         ];
 		
 		//小カテゴリを配列変数へ格納
         $computer_categories = [
             'ノートPC', 'デスクトップPC', 'タブレット' 
         ];
 		//小カテゴリを配列変数へ格納
         $display_categories = [
             '19~20インチ', 'デスクトップPC', 'タブレット' 
         ];
 		
 		//大カテゴリで回して要素名で処理分岐
         foreach ($major_category_names as $major_category_name) {
             //大カテゴリの要素'本'なら
             if ($major_category_name == '本') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($book_categories as $book_category) {
                     Category::create([
                         'name' => $book_category,
                         'description' => $book_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
 			
 			//大カテゴリの要素'コンピュータ'なら
             if ($major_category_name == 'コンピュータ') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($computer_categories as $computer_category) {
                     Category::create([
                         'name' => $computer_category,
                         'description' => $computer_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
 			
 			//大カテゴリの要素'ディスプレイ'なら
             if ($major_category_name == 'ディスプレイ') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($display_categories as $display_category) {
                     Category::create([
                         'name' => $display_category,
                         'description' => $display_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
         }
	
	
	
}


----------------------------------------------
・4.2　定義したシーダを読み込む
★【コマンド】上記で作成したシーダーを読み込ませる
composer dump-autoload
----------------------------------------------
・4.3　カテゴリデータを作成する
★【コマンド】カテゴリデータを作成する
php artisan db:seed --class=CategoriesTableSeeder


◆シーダーが作成されたかTinkerを使用して確認
【コマンド】
・　php artisan tinker

・　Category::all()

◆表示されていればtinkerを終了
【コマンド】
・exit

◆◆◆ここで一度テーブルを削除して再度まいグレーションを行う//--------------------やり直す意味は？？
【コマンド】
php artisan migrate::fresh //テーブルを削除


◆◆◆再度カテゴリデータを作成しなおす
【コマンド】
php artisan db:seed --class=CategoriesTableSeeder　　　　　//-----------------migrationをやり直すのにmigrateがない？？？













































































