
--------------------------------------------
●要件定義書の作成
--------------------------------------------
【機能詳細】
・ログイン
・お気に入り
・商品のソート
・カート（ショッピングカート）

＜実装する為の使用ライブラリ＞
★Laravelで使用できるライブラリ

●laravel/ui　　ログイン機能を実装する為に用いる

●overtrue/laravel-favorite：　　フォローやお気に入り等のライブラリ

●bumbummen99/LaravelShoppingcart　　ショッピングカートを実装できる

----------------------------------------------------------------
※各バージョンの確認方法
・PHP　-V
・composer　-v
----------------------------------------------------------------

-------------------------------------------------------------------------------------------
●1.プロジェクトの作成********************************************************************
-------------------------------------------------------------------------------------------
・＜samuraimartプロジェクトを作成＞
【コマンド】
composer create-project "laravel/laravel=9.*" laravel-samuraimart

※プロジェクトを作成するときはパスに注意する。
PS C:\xampp\htdocs> 
★＜●●htdocs直下で行う●●＞

※※※＜phpのverが9.代であることも注意が必要＞

-------------------------------------------------------------------------------------------
●2.タイムゾーンの設定********************************************************************
-------------------------------------------------------------------------------------------
プロジェクト
　　　L　config
　　　　L　app.php
　　　　'timezone' => 'Asia/Tokyo',//ここを変更
　　　　

-------------------------------------------------------------------------------------------
●3.データベースの作成********************************************************************
-------------------------------------------------------------------------------------------

----------------------------------------------
・3.1　データベースの作成
----------------------------------------------
◆mysqlの【admin】ボタンをクリック。
◆新規作成をクリックして、DB名を入力し作成をクリック

----------------------------------------------
・3.2　envファイルにDBを設定
----------------------------------------------
◆ DB_DATABASE=laravel_samuraimart



----------------------------------------------
・3.3　モデルとマイグレーションを行いDBと接続
----------------------------------------------
【コマンド】
php artisan make:model Category -m
---------------------------------------------------------
app
　L　Models
　　　　L　Category.php　が作成される。
---------------------------------------------------------　　　　
【-m】オプションをつけたのでmigragionフォルダに　　　　
database　　　　
　　L　migration
　　　　　　L　2023_02_20_193432_create_categories_table.phpファイルも作成されている
　　　　　　　　


----------------------------------------------
・3.4　マイグレーションファイルを編集してフィールド定義
----------------------------------------------
database　　　　
　　L　migration
　　　　　　L　2023_02_20_193432_create_categories_table.php
function　UP　
{
			$table->string('name');
            $table->text('description');
            $table->string('major_category_name');
｝　　　　
※上記３つを追加。フィールド定義

定義を反映させるには必ずmigrateを行う
【コマンド】
php artisan migrate

----------------------------------------------
・3.5　カテゴリを追加　＜★ライブラリ＞
----------------------------------------------
【コマンド実行】
php artisan tinker
※コードを気軽に試せるのがTinkerのメリット

【コマンド】
 Category::all()
 これを打ち込んでそのあとに内部の実装をここで行える。
 
  Category::all()
　
　//Categoryモデルを用いて新しい$category変数を作成
　$category = new Category()

//親カテゴリの名前と説明文を追加　　　　　　
　$category->major_category_name="Food"//----------------------------------------
　
　//カテゴリの名前を追加するコードを記述
　$category->name="meat"//-------------------------------------------------------
　
　//カテゴリの説明文を追記するコード
　$category->description = "description for meat."//-------------------------------
　　　　　
　
　$categoryに保存されているデータをデータベースに保存。
　$category->save()　　　　　

  //作成した＜モデル＞Categoryに設定した内容を確認
　　Category::all()

	//tinkerを終了する
	【コマンド】
	　exit　　　　　　＜モデル名::all()　～　　exit＞

-------------------------------------------------------------------------------------------
●4.カテゴリのシーダーを作る********************************************************************
-------------------------------------------------------------------------------------------
database
    L seeders
         L CategoriesTableSeeder.php
         
※※シーダーとはダミーのデータや必要になる基礎データなどをまとめて作成することができる仕組み
【コマンド】
php artisan make:seeder CategoriesTableSeeder

CategoriesTableSeeder.phpに下記を宣言して内容を記載していく。
★use App\Models\Category;

public function run()
{
	 	//各配列変数の大カテゴリを作成
	 	$major_category_names = [
             '本', 'コンピュータ', 'ディスプレイ'
         ];
 		
 		//小カテゴリを配列変数へ格納
         $book_categories = [
             'ビジネス', '文学・評論', '人文・思想', 'スポーツ',
             'コンピュータ・IT', '資格・検定・就職', '絵本・児童書', '写真集',
             'ゲーム攻略本', '雑誌', 'アート・デザイン', 'ノンフィクション'
         ];
 		
 		//小カテゴリを配列変数へ格納
         $computer_categories = [
             'ノートPC', 'デスクトップPC', 'タブレット' 
         ];
 		//小カテゴリを配列変数へ格納
         $display_categories = [
             '19~20インチ', 'デスクトップPC', 'タブレット' 
         ];
 		
 		//大カテゴリで回して要素名で処理分岐
         foreach ($major_category_names as $major_category_name) {
             //大カテゴリの要素'本'なら
             if ($major_category_name == '本') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($book_categories as $book_category) {
                     Category::create([
                         'name' => $book_category,
                         'description' => $book_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
 			
 			//大カテゴリの要素'コンピュータ'なら
             if ($major_category_name == 'コンピュータ') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($computer_categories as $computer_category) {
                     Category::create([
                         'name' => $computer_category,
                         'description' => $computer_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
 			
 			//大カテゴリの要素'ディスプレイ'なら
             if ($major_category_name == 'ディスプレイ') {
                 //小カテゴリの配列要素を変数へ格納処理
                 foreach ($display_categories as $display_category) {
                     Category::create([
                         'name' => $display_category,
                         'description' => $display_category,
                         'major_category_name' => $major_category_name
                     ]);
                 }
             }
         }
	
	
	
}


----------------------------------------------
・4.2　定義したシーダを読み込む
★【コマンド】上記で作成したシーダーを読み込ませる
composer dump-autoload
----------------------------------------------
・4.3　カテゴリデータを作成する
★【コマンド】カテゴリデータを作成する
php artisan db:seed --class=CategoriesTableSeeder


◆シーダーが作成されたかTinkerを使用して確認
【コマンド】
・　php artisan tinker

・　Category::all()

◆表示されていればtinkerを終了
【コマンド】
・exit

◆◆◆ここで一度テーブルを削除して再度まいグレーションを行う//--------------------やり直す意味は？？
【コマンド】
php artisan migrate::fresh //テーブルを削除


◆◆◆再度カテゴリデータを作成しなおす
【コマンド】
php artisan db:seed --class=CategoriesTableSeeder　　　　　//-----------------migrationをやり直すのにmigrateがない？？？
-------------------------------------------------------------------------------------------
●5商品を追加できるようにしよう
-------------------------------------------------------------------------------------------
----------------------------------------
◆5.1商品のモデルを追加
----------------------------------------
【コマンド】
php artisan make:model Product -m
----------------------------------------------------------
database
　　L　migrations
　　　　　　L　XXXX_XX_XX_XXXXXX_create_products_table.php
-----------------------------------------------------------

◆上記ファイルに定義追加
			public function up()
    		{
				$table->string('name');
            	$table->text('description');
            	$table->integer('price')->unsigned();//unsigned()を追加することで、-5000などのマイナスの値が保存できない				$table->integer('category_id')->unsigned();
			}
			

----------------------------------------
◆5.2商品のコントローラーを追加
----------------------------------------
【コマンド】
php artisan make:controller ProductController --resource --model=Product


----------------------------------------
◆5.2商品のコントローラーと紐づけを作成
----------------------------------------
app
　L　Models
　　　　L　Product.php
　　★★　　
　　public function category()
     {
         return $this->belongsTo('App\Models\Category');//モデルからCategoryを呼び出す設定をしている
     }　　
--------------------------------------------------------------------------

●category.phpも同様にリレーション設定を行う
	 public function products()
     {
         return $this->hasMany('App\Models\Product');//今回は紐づけというよりモデルからProductを呼び出せるようにしている
     }
※１つのカテゴリには複数の商品が結びつくのでhasmany

----------------------------------------
◆5.3 マイグレーションを実行
----------------------------------------
【コマンド】
php artisan migrate


----------------------------------------
◆5.4 商品のCRUDを作成
----------------------------------------
----------------------------------------
◆5.4.1商品のCRUD用のルーティング設定を行う
----------------------------------------
routes
　　L　　routes\web.php
　　
　　Route::resource('products', ProductController::class);//productsControllerを使用を定義
　　※【第一引数にベースとなるURLを文字列で渡し、第二引数で使用するコントローラを指定】
　　
　　
----------------------------------------
◆5.4.2コントローラーの設定を行う
----------------------------------------　
app
　L　Http
　　　L　Controllers
　　　　　　　　L　ProductController.php

　【◆index】
	　	public function index()
	    {
	        $products=Product::all();//productsの全てを取得
	        return view('products.index',compact('products'));//
	    }
	※'products.index'と記述すると、resources\views\productsディレクトリの中にあるindex.blade.phpが呼び出されます

------------------------------------------	
◆viewの作成
-----------------------------------------
resources
     L views
          L ●●●.blade.php　ファイルを作成する
				
			【view】
			<a href="{{ route('products.create') }}"> Create New Product</a>
 
			 <table>
			     <tr>
			         <th>Name</th>
			         <th>Description</th>
			         <th>Price</th>
			         <th>Category ID</th>
			         <th >Action</th>
			     </tr>
			     @foreach ($products as $product)
			     <tr>
			         <!--◆◆◆BladeではPHPのコードを{{と}}で囲むことで変数の中身をそのまま表示◆◆◆-->
			         <td>{{ $product->name }}</td>
			         <td>{{ $product->description }}</td>
			         <td>{{ $product->price }}</td>
			         <td>{{ $product->category_id }}</td>
			         <td>
			             <form action="{{ route('products.destroy',$product->id) }}" method="POST">
			                <a href="{{ route('products.show',$product->id) }}">Show</a>
			                <a href="{{ route('products.edit',$product->id) }}">Edit</a>
			                 @csrf
			                 @method('DELETE')
			                 <button type="submit">Delete</button>
			             </form>
			         </td>
			     </tr>
			     @endforeach
			 </table>	
--------------------------------------------------------------------------------------------------------	

	【◆createコントローラーの設定】
		public function create()
	    {
	         return view('products.create');
	    }
	【◆◆viewの作成】
	resources
	　　　L　views
	　　　　　　L　products
	　　　　　　　　　　L　create.blade.php
						-------------------------------------------------------------------------------------------
						<div>
     						<h2>Add New Product</h2>
						 </div>
						 <div>
						     <a href="{{ route('products.index') }}"> Back</a>
						 </div>
						 
						 <form action="{{ route('products.store') }}" method="POST">
						     @csrf
						 
						     <div>
						         <strong>Name:</strong>
						         <input type="text" name="name" placeholder="Name">
						     </div>
						     <div>
						         <strong>Description:</strong>
						         <textarea style="height:150px" name="description" placeholder="Description"></textarea>
						     </div>
						     <div>
						         <strong>Price:</strong>
						         <input type="number" name="price" placeholder="Price">
						     </div>
						     <div>
						         <button type="submit">Submit</button>
						     </div>
						 
						 </form>

				-------------------------------------------------------------------------------------------

				【★★storeアクション】
				-------------------------------------------------------------------------------------------
					public function store(Request $request)
				    {
				        $product = new Product();
				         $product->name = $request->input('name');
				         $product->description = $request->input('description');
				         $product->price = $request->input('price');
				         $product->save();
				 
				         return to_route('products.index');
				    }	
				    ※return to_route('products.index’);ではデータが保存された後
				    ※リダイレクト（別のページに移動すること）を行っています。
				-------------------------------------------------------------------------------------------	
				
				-------------------------------------------------------------------------------------------	
				【★★showアクション】
				-------------------------------------------------------------------------------------------	
					public function show(Product $product)
				    {
				        return view('products.show', compact('product'));
				    }
			　　  -------------------------------------------------------------------------------------------	
			【★★showViewの作成】
			resources
			　　L　views
			　　　　　L　products
			　　　　　　　　　L　show.blade.php
						-------------------------------------------------------------------------------------------
						<div>
						     <h2> Show Product</h2>
						 </div>
						 <div>
						     <a href="{{ route('products.index') }}"> Back</a>
						 </div>
						 
						 <div>
						     <strong>Name:</strong>
						     {{$product->name}}
						 </div>
						 
						 <div>
						     <strong>Description:</strong>
						     {{$product->description}}
						 </div>
						 
						 <div>
						     <strong>Price:</strong>
						     {{$product->price}} 
						 </div>
						 
						 -------------------------------------------------------------------------------------------
				-------------------------------------------------------------------------------------------	
				【★★editアクション】
				-------------------------------------------------------------------------------------------	
				public function edit(Product $product)
			    {
			        return view('products.edit', compact('product'));
			    }
			 -------------------------------------------------------------------------------------------
			【★★showViewの作成】
			-------------------------------------------------------------------------------------------
			resources
			　　L　views
			　　　　　L　products
			　　　　　　　　　L　edit.blade.php    
			    
							    <div>
								     <h2>Edit Product</h2>
								 </div>
								 <div>
								     <a href="{{ route('products.index') }}"> Back</a>
								 </div>
								 
								 <form action="{{ route('products.update',$product->id) }}" method="POST">
								     @csrf
								     @method('PUT')//【※更新の時はPUT※】
								 
								     <div>
								         <strong>Name:</strong>
								         <input type="text" name="name" value="{{ $product->name }}" placeholder="Name">
								     </div>
								     <div>
								         <strong>Description:</strong>
								         <textarea style="height:150px" name="description" placeholder="description">{{ 											$product->description }}</textarea>
								     </div>
								     <div>
								         <strong>Price:</strong>
								         <input type="number" name="price"  value="{{ $product->price }}">
								     </div>
								     <div>
								         <button type="submit">Submit</button>
								     </div>
								 
								 </form>
								 
				-------------------------------------------------------------------------------------------	
				【★★updateアクション】
				-------------------------------------------------------------------------------------------
				public function update(Request $request, Product $product)
			    {
			        $product->name = $request->input('name');
			         $product->description = $request->input('description');
			         $product->price = $request->input('price');
			         $product->update();
			 
			         return to_route('products.index');
			    }
				-------------------------------------------------------------------------------------------	

				【★★deleteアクション★★】
				-------------------------------------------------------------------------------------------	
				public function destroy(Product $product)
			    {
			        $product->delete();
			  
			         return to_route('products.index');
			    }
			    -------------------------------------------------------------------------------------------	
----------------------------------------
◆5.5商品登録時にカテゴリを選択できるようにする
----------------------------------------　
-------------------------------------------------------------------------------------------	
app
　L　Http　
　　　　L　Controllers
　　　　　　　　L　ProductController.php
-------------------------------------------------------------------------------------------	
　　　　　　　　use App\Models\Category;　//Categoryモデルを使用できるよう宣言
　　　　　　　　
		【★★createアクションの変更】
		public function create()
	    {
	         return view('products.create');
	         $categories = Category::all();
	  
	         return view('products.create', compact('categories'));
	    }
　　　　-------------------------------------------------------------------------------------------	
　　　　【★★create.blade.phpに追加★★】
　　　　-------------------------------------------------------------------------------------------	
　　　　resources
　　　　　　　L　views\products
　　　　　　　　　　　L　create.blade.php
　　　　-------------------------------------------------------------------------------------------	
　　　　<div>
         <strong>Category:</strong>
         <select name="category_id">
         @foreach ($categories as $category)
         <option value="{{ $category->id }}">{{ $category->name }}</option>
         @endforeach
         </select>
    	 </div>
　　　　-------------------------------------------------------------------------------------------	　　　
◆app
　L　Http
　　　L　Controllers
　　　　　　　L　ProductController.php
　　　　　　　　storeアクションでcategory_idをデータベースに保存できるようにします　　　　　　　　
			-------------------------------------------------------------------------------------------	
			【★★storeアクション★★】
			-------------------------------------------------------------------------------------------	
			public function store(Request $request)
		    {
		        $product = new Product();
		        $product->name = $request->input('name');
		        $product->description = $request->input('description');
		        $product->price = $request->input('price');
		         $product->category_id = $request->input('category_id');
		        $product->save();

		        return to_route('products.index');
		    }
		    -------------------------------------------------------------------------------------------	
			-------------------------------------------------------------------------------------------	
			【★★editアクション変更★★】
			-------------------------------------------------------------------------------------------	
			public function edit(Product $product)
		    {
		        $categories = Category::all();
		  
		         return view('products.edit', compact('product', 'categories'));
		    }
			-------------------------------------------------------------------------------------------	
			【★★editビュー変更★★】
			-------------------------------------------------------------------------------------------	
			resources
			　　L　views
			　　　　　L　products
			　　　　　　　　L　edit.blade.php
			-------------------------------------------------------------------------------------------	
			<div>
		         <strong>Category:</strong>
		         <select name="category_id">
		         @foreach ($categories as $category)
		             @if ($category->id == $product->category_id)
		                 <option value="{{ $category->id }}" selected>{{ $category->name }}</option>
		             @else
		                 <option value="{{ $category->id }}">{{ $category->name }}</option>
		             @endif
		         @endforeach
		         </select>
		     </div>
			-------------------------------------------------------------------------------------------	
			
			-------------------------------------------------------------------------------------------	
			【★★updateアクションでCategory_idを保存できるようにする★★】
			-------------------------------------------------------------------------------------------	
			app
			　L　Http
			　　　　L　Controllers
			　　　　　　　　　L　ProductController.php
			-------------------------------------------------------------------------------------------	
			【productContoroller.php】
			【★★updateアクション★★｝
			-------------------------------------------------------------------------------------------	
			public function update(Request $request, Product $product)
		    {
		        $product->name = $request->input('name');
		         $product->description = $request->input('description');
		         $product->price = $request->input('price');
		         $product->category_id = $request->input('category_id');
		         $product->update();
		 
		         return to_route('products.index');
		    }
			-------------------------------------------------------------------------------------------	
			
			

----------------------------------------
●6.1ログイン機能を追加する。
----------------------------------------　
※Laravel UIパッケージをインストール
【コマンド】
composer require laravel/ui

【コマンド】
bootstrapを指定してScaffolding（骨組み）を作成
php artisan ui bootstrap --auth

上記実行するとWarningがでるのでnpmnpm install && npm run devを実行する
【コマンド】
・npm install 

・npm run dev
※それぞれ別々にインストールする。

---------------------------------------------
◆上記コマンドを実行するとweb.phpに下記表示が出力されている
---------------------------------------------
routes
　　L　web.php
---------------------------------------------
Auth::routes();

Route::get('/home', [App\Http\Controllers\HomeController::class, 'index'])->name('home');
-------------------------------------------------------------------------------------------	
-------------------------------------------
6.2 ログイン関連画面のデザインを調整しよう
-------------------------------------------
◆ログイン画面のデザイン調整

resources
　　　L　views
　　　　　　L　auth
　　　　　　　　L　login.blade.php
　　　　　　　　
　　　　　　　　 
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	
				 @extends('layouts.app')<!--★★@extends('layouts.app')　resources\views\layoutsディレクトリ内のapp.blade.phpを使用する事を示している-->
				 @section('content')
				 <div class="container"><!--resources\views\layouts\app.blade.php内の@yeild部分に差し込まれる-->
				     <div class="row justify-content-center">
				         <div class="col-md-5">
				             <h3 class="mt-3 mb-3">ログイン</h3>
				 
				             <hr>
				             <form method="POST" action="{{ route('login') }}">
				                 @csrf
				 
				                 <div class="form-group">
				                     <input id="email" type="email" class="form-control @error('email') is-invalid @enderror samuraimart-login-input" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus placeholder="メールアドレス">
				 
				                     @error('email')
				                     <span class="invalid-feedback" role="alert">
				                         <strong>メールアドレスが正しくない可能性があります。</strong>
				                     </span>
				                     @enderror
				                 </div>
				 
				                 <div class="form-group">
				                     <input id="password" type="password" class="form-control @error('password') is-invalid @enderror samuraimart-login-input" name="password" required autocomplete="current-password" placeholder="パスワード">
				 
				                     @error('password')
				                     <span class="invalid-feedback" role="alert">
				                         <strong>パスワードが正しくない可能性があります。</strong>
				                     </span>
				                     @enderror
				                 </div>
				 
				                 <div class="form-group">
				                     <div class="form-check">
				                         <input class="form-check-input" type="checkbox" name="remember" id="remember" {{ old('remember') ? 'checked' : '' }}>
				 
				                         <label class="form-check-label samuraimart-check-label w-100" for="remember">
				                             次回から自動的にログインする
				                         </label>
				                     </div>
				                 </div>
				 
				                 <div class="form-group">
				                     <button type="submit" class="mt-3 btn samuraimart-submit-button w-100">
				                         ログイン
				                     </button>
				 
				                     <a class="btn btn-link mt-3 d-flex justify-content-center samuraimart-login-text" href="{{ route('password.request') }}">
				                         パスワードをお忘れの場合
				                     </a>
				                 </div>
				             </form>
				 
				             <hr>
				 
				             <div class="form-group">
				                 <a class="btn btn-link mt-3 d-flex justify-content-center samuraimart-login-text" href="{{ route('register') }}">
				                     新規登録
				                 </a>
				             </div>
				         </div>
				     </div>
				 </div>
				 @endsection
-------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	-------------------------------------------------------------------------------------------	

-------------------------------------------
6.3 スタイルシートを作成
-------------------------------------------
public
  L css
     L samuraimart.css
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		.samuraimart-login-input {
     border-radius: 2px;
     border: solid 1px #b2b2b2;
     background-color: #ffffff;
 }
 
 .samuraimart-check-label {
     font-family: YuGo;
     font-size: 12px;
     font-weight: 500;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #000000;
 }
 
 .samuraimart-require-input-label {
     border-radius: 1px;
     background-color: #e2001b;
 }
 
 .samuraimart-require-input-label-text {
     font-family: YuGo;
     font-size: 14px;
     font-weight: 500;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #ffffff;
 }
 
 .samuraimart-submit-button {
     font-family: YuGo;
     font-size: 14px;
     font-weight: bold;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #ffffff;
     background-color: #0fbe9f;
 }
 
 .samuraimart-login-text {
     font-family: YuGo;
     font-size: 14px;
     font-weight: bold;
     font-stretch: normal;
     font-style: normal;
     line-height: normal;
     letter-spacing: normal;
     color: #0fbe9f;
 }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
resources
    L views
        L layouts
             L app.blade.phpに先ほど作成した
             ※public\css\samuraimart.cssを読み込むコードを追加します。
　　　　　　【◆追加する】
			<link href="{{ asset('css/samuraimart.css') }}" rel="stylesheet">
			※asset()関数を使用することで、publicディレクトリ配下のファイルにアクセスできる



			
-------------------------------------------
6.4　パスワード再設定画面のデザイン調整
-------------------------------------------
resources
　　　　L　views
　　　　　　　L　auth
　　　　　　　　　　L　passwords
　　　　　　　　　　　　　L　email.blade.php　【●ここパスワード再設定画面が実装されている】
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
							 @extends('layouts.app')
							 
							 @section('content')
							 <div class="container">
							     <div class="row justify-content-center">
							         <div class="col-md-5">
							             <h3 class="mt-3 mb-3">パスワード再設定</h3>
							 
							             <p>
							                 ご登録時のメールアドレスを入力してください。<br>
							                 パスワード再発行用のメールをお送りします。  
							             </p>
							 
							             <hr>
							 
							             @if (session('status'))
							             <div class="alert alert-success" role="alert">
							                 {{ session('status') }}
							             </div>
							             @endif
							 
							 
							             <form method="POST" action="{{ route('password.email') }}">
							                 @csrf
							 
							                 <div class="form-group">
							                     <input id="email" type="email" class="form-control @error('email') is-invalid @enderror samuraimart-login-input" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus placeholder="メールアドレス">
							 
							                     @error('email')
							                     <span class="invalid-feedback" role="alert">
							                         <strong>メールアドレスが正しくない可能性があります。</strong>
							                     </span>
							                     @enderror
							                 </div>
							 
							                 <div class="form-group">
							                     <button type="submit" class="btn samuraimart-submit-button w-100">
							                         送信
							                     </button>
							                 </div>
							             </form>
							         </div>
							     </div>
							 </div>
							 @endsection
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------
6.5　新規アカウント作成画面のデザイン調整
-------------------------------------------
【アカウント画面】
resources
　　　L　views
　　　　　　　L　auth
　　　　　　　　　L　register.blade.php
-------------------------------------------　　　　　　　　　

		@extends('layouts.app')
		 
		 @section('content')
		 <div class="container">
		     <div class="row justify-content-center">
		         <div class="col-md-5">
		             <h3 class="mt-3 mb-3">新規会員登録</h3>
		 
		             <hr>
		 
		             <form method="POST" action="{{ route('register') }}">
		                 @csrf
		 
		                 <div class="form-group row">
		                     <label for="name" class="col-md-5 col-form-label text-md-left">氏名<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input id="name" type="text" class="form-control @error('name') is-invalid @enderror samuraimart-login-input" name="name" value="{{ old('name') }}" required autocomplete="name" autofocus placeholder="侍 太郎">
		 
		                         @error('name')
		                         <span class="invalid-feedback" role="alert">
		                             <strong>氏名を入力してください</strong>
		                         </span>
		                         @enderror
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="email" class="col-md-5 col-form-label text-md-left">メールアドレス<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input id="email" type="email" class="form-control @error('email') is-invalid @enderror samuraimart-login-input" name="email" value="{{ old('email') }}" required autocomplete="email" placeholder="samurai@samurai.com">
		 
		                         @error('email')
		                         <span class="invalid-feedback" role="alert">
		                             <strong>メールアドレスを入力してください</strong>
		                         </span>
		                         @enderror
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="postal_code" class="col-md-5 col-form-label text-md-left">郵便番号<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input type="text" class="form-control @error('postal_code') is-invalid @enderror samuraimart-login-input" name="postal_code" required placeholder="150-0043">
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="address" class="col-md-5 col-form-label text-md-left">住所<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input type="text" class="form-control @error('address') is-invalid @enderror samuraimart-login-input" name="address" required placeholder="東京都渋谷区道玄坂２丁目１１−１">
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="phone" class="col-md-5 col-form-label text-md-left">電話番号<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input type="text" class="form-control @error('phone') is-invalid @enderror samuraimart-login-input" name="phone" required placeholder="03-5790-9039">
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="password" class="col-md-5 col-form-label text-md-left">パスワード<span class="ml-1 samuraimart-require-input-label"><span class="samuraimart-require-input-label-text">必須</span></span></label>
		 
		                     <div class="col-md-7">
		                         <input id="password" type="password" class="form-control @error('password') is-invalid @enderror samuraimart-login-input" name="password" required autocomplete="new-password">
		 
		                         @error('password')
		                         <span class="invalid-feedback" role="alert">
		                             <strong>{{ $message }}</strong>
		                         </span>
		                         @enderror
		                     </div>
		                 </div>
		 
		                 <div class="form-group row">
		                     <label for="password-confirm" class="col-md-5 col-form-label text-md-left"></label>
		 
		                     <div class="col-md-7">
		                         <input id="password-confirm" type="password" class="form-control samuraimart-login-input" name="password_confirmation" required autocomplete="new-password">
		                     </div>
		                 </div>
		 
		                 <div class="form-group">
		                     <button type="submit" class="btn samuraimart-submit-button w-100">
		                         アカウント作成
		                     </button>
		                 </div>
		             </form>
		         </div>
		     </div>
		 </div>
		 @endsection

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

【コマンド】※実行
npm install 
npm run dev

【コマンド】
最後にビルドを行う
npm run build


----------------------------------------
●6.1ログイン機能(アカウント作成時メール送信　各種メッセージの日本語化
----------------------------------------　
※二段階認証の設定（smtp）
★セキュリティー２段階プロセスクリックーアプリ選択でメール　デバイス選択でその他（名前を入力）-１６桁のパスワードが設定される

上記情報を.envファイルに設定する。
	
	
	MAIL_MAILER=smtp
	MAIL_HOST=smtp.gmail.com
	MAIL_PORT=587
	MAIL_USERNAME="kf.fff0809@gmail.com"
	MAIL_PASSWORD="自分のパスワード"
	MAIL_ENCRYPTION=tls
	MAIL_FROM_ADDRESS="kf.fff0809@gmail.com"
	MAIL_FROM_NAME="${APP_NAME}"
	
	
----------------------------------------
●6.2　ユーザーモデルにメール送信機能を実装
----------------------------------------　	
	app
	　L　Models
	　　　　L　User.php
---------------------------------------------
●use Illuminate\Contracts\Auth\MustVerifyEmail;//★宣言追加

●class User extends Authenticatable implements MustVerifyEmail　//Authenticatableの継承は変わらないがimplements MustVerifyEmailでメール送信クラスの定義を追加している

----------------------------------------
●6.3　送信するメールの日本語化
----------------------------------------
esources
    L views
    上記階層に送信するメールのテンプレートとなっているビューを作成する。
    【コマンド】
    ◆php artisan vendor:publish --tag=laravel-notifications
    

◆resources
　　　L　views
　　　　　　L　vendor
　　　　　　　　　L　notifications
　　　　　　　　　　　　　　L　email.blade.php
　　　　　　　　　　　　　　上記コマンドで作成されたemail.blade.phpを編集して日本語にする。
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
　　　　　　　　　　　　　　@lang('こんにちは!')//

							@lang('宜しくお願いします。'),<br>
							
							@lang(":actionText ボタンが利用できない場合は、以下のURLをコピー＆ペーストしてブラウザから直接アクセスしてください。\n",
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------
●6.3.2　送信するメール本文の日本語化
----------------------------------------

★php artisan make:notification CustomVerifyEmailを実行し、メールを送信する際の本文などを実装するファイルを作成します。
【コマンド】
◆php artisan make:notification CustomVerifyEmail
　app
　　L　Notifications
　　　　　　　　L　CustomVerifyEmail.php
					【★CustomVerifyEmail.phpの中身を日本語に変更】
					--------------------------------------------------------------------------------------
					use Illuminate\Auth\Notifications\VerifyEmail;VerifyEmailを宣言
					class CustomVerifyEmail extends VerifyEmail//VerifyEmailの派生クラスを作成(
					※クラスCustomVerifyEmailのVerifyEmailを定義することで、 メール認証を有効にします。※
					
					＜＜＜＜★★★※【__()】 で囲むことで、日本語や英語などの言語設定に対応したメッセージに変更できます＞＞＞＞
					
					->line(__('Verify Your Email Address'))
                    ->action(__('Verify Email Address'), $this->verificationUrl($notifiable))
                    ->line(__('If you did not create an account, no further action is required.'));
					--------------------------------------------------------------------------------------


----------------------------------------
●6.3.3　送信するメールをユーザーに結びつける
----------------------------------------
app
　L　Models
　　　　L　User.php
------------------------------------------------
		【User.php】
		 ◆use App\Notifications\CustomVerifyEmail;

			public function sendEmailVerificationNotification()//functionの追加
		     {
		         $this->notify(new CustomVerifyEmail());//CustomVerifyEmail()のインスタンスをセット
		         
		     }



----------------------------------------
●6.3.4　パスワードリセット時のメール内容を変更
----------------------------------------
【コマンド】
◆php artisan make:notification CustomResetPassword

app
　L　Notifications
　　　　　　L　CustomResetPassword.php
				【CustomResetPassword.php】
				◆use Illuminate\Auth\Notifications\ResetPassword;
				
				◆class CustomResetPassword extends ResetPassword　//ResetPasswordからの継承クラスに変更
		
				◆public $token;//グローバルスコープの変数を一つ用意
				◆	public function __construct($token)
				    {
				        $this->token=$token;//パラメータで受けた$tokenをtokenにセット
				    }



				◆	public function toMail($notifiable)
				    {
				        //【★new MailMessageの処理として下記を追加】
				        //パスワードを再発行するメールには、トークンを含んだURLにする必要があるため、$tokenを利用します。
				        return (new MailMessage)
				        ->line(__('Click button below and reset password.'))
				        ->action(__('Reset password'), url(route('password.reset', $this->token, false)))
				        ->line(__('If you did not request a password reset, no further action is required.'));
				    }
------------------------------------------------------------------------------------------------------------------------------



----------------------------------------
●6.3.5　送信するメールをuserに紐づける
----------------------------------------
-----------------------------------------------------------------------------------------------------------
app
　L　Models
　　　　L　User.php
-----------------------------------------------------------------------------------------------------------
			【User.php】
			◆use App\Notifications\CustomResetPassword;//宣言【CustomResetPassword】
			
			◆public function sendPasswordResetNotification($token) 
			{
         		$this->notify(new CustomResetPassword($token));
     		}
-----------------------------------------------------------------------------------------------------------

----------------------------------------
●6.3.6　キーを設定し、その対応するキーに日本語を記載して外部ファイル的に使用する
----------------------------------------
aravel-samuraimart
　　　　　L　lang
　　　　　　　　L　ja.json　//このファイルを作成してキーに対応する日本語一覧を記載
----------------------------------------
				【ja.json】
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				 {
				   "Login": "ログイン",
				   "E-Mail Address": "メールアドレス",
				   "Password": "パスワード",
				   "Remember Me": "ログイン状態を保存する",
				   "Forgot Your Password?": "パスワードをお忘れですか ?",
				   "Register": "登録",
				   "Name": "お名前",
				   "Confirm Password": "パスワード(確認用)",
				   "Reset Password": "パスワードリセット",
				   "Send Password Reset Link": "パスワードリセットリンク送信",
				   "Logout": "ログアウト",
				   "Verify Your Email Address": "「メールアドレス確認」ボタンをクリックして、ユーザ登録を完了してください",
				   "A fresh verification link has been sent to your email address.": "新しいリンクをあなたのメールアドレスに送信しました。",
				   "Before proceeding, please check your email for a verification link.": "メールに記載されているリンクをクリックして、登録手続きを完了してください。",
				   "If you did not receive the email": "メールが届いていなければ、",
				   "click here to request another": "こちらをクリックして再送信してください。",
				   "Please click the link below to verify your email address.": "メールアドレスを確認するために下のリンクをクリックしてください。",
				   "Verify Email Address": "メールアドレス確認",
				   "If you did not create an account, no further action is required.": "心当たりがない場合は、本メッセージは破棄してください。",
				   "Click button below and reset password.": "下のボタンをクリックしてパスワードを再設定してください。",
				   "If you did not request a password reset, no further action is required.": "心当たりがない場合は、本メッセージは破棄してください。"
				 }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------
●6.3.7　日本語化最終設定　ja.jasonファイルのlocalにjaをセットして終了
----------------------------------------
config
  L app.php
  　　'locale' => 'en',　　　　を　　　　'locale' => 'ja'
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－-----


----------------------------------------
●6.4　アカウント作成後のリダイレクト先を変更する
----------------------------------------
app
 L Http
     L Controllers
             L Auth
                 L RegisterController.php
					【★RegisterController.php】
					　protected $redirectTo = '/email/verify';	//リダイレクト先を変更
					　
					　
					　

◆ルーティングのリダイレクト先を変更する
-------------------------------------------------------
routes　
　L　web.php
-------------------------------------------------------
			【web.php】
			Route::resource('products', ProductController::class)->middleware(['auth', 'verified']);
 			Auth::routes(['verify' => true]);
			－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
			※これで、メールでの認証が済んでいない場合は、商品のCRUD画面には遷移せず、メール送信画面へと遷移します。
			--------------------------------------------------------------------------------------------------------


-------------------------------------
◆ログイン後のリダイレクト先の変更
-------------------------------------
	app
	 L Http
	     L Controllers 
	            L Auth
	                L LoginController.php
						【LoginController.php】
						◆protected $redirectTo = '/';//リダイレクト先を現在地へ登録
						
---------------------------------------------------
◆アカウント作成後のメール送信画面のデザイン修正
---------------------------------------------------

resources
     L views
         L auth
            L verify.blade.php
				【verify.blade.php】
------------------------------------------------------------------------------------------------------------------------------------------------------
				◆@extends('layouts.app')
 
				 @section('content')
				 <div class="container">
				     <div class="row justify-content-center">
				         <div class="col-md-5">
				             <h3 class="text-center">会員登録ありがとうございます！</h3>
				 
				             <p class="text-center">
				                 現在、仮会員の状態です。  
				             </p>
				 
				             <p class="text-center">
				                 ただいま、ご入力頂いたメールアドレス宛に、ご本人様確認用のメールをお送りしました。  
				             </p>
				 
				             <p class="text-center">
				                 メール本文内のURLをクリックすると本会員登録が完了となります。  
				             </p>
				             <div class="text-center">
				                 <a href="{{ url('/') }}" class="btn samuraimart-submit-button w-50 text-white">トップページへ</a>
				             </div>
				         </div>
				     </div>
				 </div>
				 @endsection
------------------------------------------------------------------------------------------------------------------------------------------------------





























































































































